// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Urql from "urql";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as ReactDOMRe from "reason-react/src/ReactDOMRe.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactModal from "react-modal";
import * as OneGraphAuth from "bs-onegraph-auth/src/OneGraphAuth.bs.js";
import * as ReactMarkdown from "react-markdown";
import * as ReactDraggable from "react-draggable";
import * as Hooks$EggheadStatic from "./Hooks.bs.js";
import * as Icons$EggheadStatic from "./Icons.bs.js";
import * as Config$EggheadStatic from "../lib/Config.bs.js";
import * as OneJwt$EggheadStatic from "../lib/bindings/OneJwt.bs.js";
import * as GraphQL$EggheadStatic from "./GraphQL.bs.js";
import * as ReactMonacoLazy$EggheadStatic from "./ReactMonacoLazy.bs.js";
import * as PullRequestManager$EggheadStatic from "./PullRequestManager.bs.js";

var assign = (function(name, item) {
     window[name] = item;
});

function random(length) {
  var gen = function (param) {
    var n = Js_math.random_int(0, 62);
    if (n < 26) {
      return /* "a" */97 + n | 0;
    } else if (n < 52) {
      return (/* "A" */65 + n | 0) - 26 | 0;
    } else {
      return ((/* "0" */48 + n | 0) - 26 | 0) - 26 | 0;
    }
  };
  var gen$1 = function (param) {
    return $$String.make(1, Pervasives.char_of_int(gen(/* () */0)));
  };
  return $$String.concat("", $$Array.to_list($$Array.init(length, gen$1)));
}

function toBranchName(string, username) {
  var sanitized = string.replace((/[^a-zA-Z0-9]+/g), "-");
  return ("branch-name-" + (sanitized + ("" + (String(username) + "")))).toLocaleLowerCase();
}

var $$String$1 = {
  random: random,
  toBranchName: toBranchName
};

function extractSourcePosition(string) {
  if (string == null) {
    return ;
  } else {
    var match = string.split("-");
    if (match.length !== 2) {
      return ;
    } else {
      var from = match[0];
      var to_ = match[1];
      var match$1 = from.split(":");
      var match$2 = to_.split(":");
      if (match$1.length !== 2) {
        return ;
      } else {
        var fromLine = match$1[0];
        var fromChar = match$1[1];
        if (match$2.length !== 2) {
          return ;
        } else {
          var toLine = match$2[0];
          var toChar = match$2[1];
          return /* tuple */[
                  {
                    line: Caml_format.caml_int_of_string(fromLine),
                    char: Caml_format.caml_int_of_string(fromChar)
                  },
                  {
                    line: Caml_format.caml_int_of_string(toLine),
                    char: Caml_format.caml_int_of_string(toChar)
                  }
                ];
        }
      }
    }
  }
}

var Utils = {
  $$String: $$String$1,
  extractSourcePosition: extractSourcePosition
};

function getLocalJwtMe(auth) {
  return Belt_Option.map(Caml_option.nullable_to_opt(auth.accessToken()), (function (token) {
                return OneJwt$EggheadStatic.payload(token.accessToken);
              }));
}

function getLocalUserId(auth) {
  var jwtMe = getLocalJwtMe(auth);
  return Belt_Option.map(Belt_Option.flatMap(jwtMe, (function (jwtMe) {
                    return Belt_Option.flatMap(Caml_option.undefined_to_opt(jwtMe.user), (function (user) {
                                  return Caml_option.undefined_to_opt(user.id);
                                }));
                  })), (function (prim) {
                return String(prim);
              }));
}

var OneGraphAuth$1 = {
  findMissingAuthServices: OneGraphAuth.findMissingAuthServices,
  logout: OneGraphAuth.logout,
  authHeaders: OneGraphAuth.authHeaders,
  clearToken: OneGraphAuth.clearToken,
  getLocalJwtMe: getLocalJwtMe,
  getLocalUserId: getLocalUserId
};

var Box = { };

var ReactResizable = {
  Box: Box
};

function wrapper(onClick, param, children) {
  return React.createElement("div", {
              onClick: onClick
            }, children);
}

var WrapRoot = {
  wrapper: wrapper
};

var ReactMarkdown$1 = {
  WrapRoot: WrapRoot
};

var ReactDraggable$1 = { };

var ReactModal$1 = { };

var ReactDiffViewer = { };

var repoOwner = "OneGraph";

var repoName = "egghead-asciicasts-experiment";

var Egghead = { };

function LessonEditor$ReadOnly(Props) {
  var lesson = Props.lesson;
  var transcript = Props.transcript;
  return React.createElement("div", undefined, React.createElement("h4", undefined, lesson.title), React.createElement(ReactMarkdown, {
                  source: transcript.text
                }));
}

var ReadOnly = {
  make: LessonEditor$ReadOnly
};

var modalStyle = {
  display: "flex",
  marginTop: "50%",
  position: "relative",
  flexDirection: "column"
};

var activeEditorStyle = {
  backgroundColor: "white",
  border: "1px solid #ccc",
  bottom: "0px",
  left: "0px",
  minHeight: "250px",
  overflowX: "scroll",
  position: "fixed",
  borderRadius: "4px",
  boxShadow: "6px 4px 24px 0px rgba(0, 0, 0, 0.34)"
};

var inactiveEditorStyle = {
  backgroundColor: "white",
  border: "1px solid #ccc",
  bottom: "0px",
  left: "0px",
  minHeight: "250px",
  overflowX: "scroll",
  position: "fixed",
  opacity: "0.25",
  borderRadius: "4px"
};

var textEditorStyle = {
  fontSize: "2em",
  height: "20ch",
  width: "100%"
};

function submitPr(client, branchName, title, body, editedContent, filePath, sha, username) {
  return GraphQL$EggheadStatic.chain(/* :: */[
              (function (param) {
                  return GraphQL$EggheadStatic.mutation(client, GraphQL$EggheadStatic.CreateBranchMutation.make(repoOwner, repoName, branchName, /* () */0), "Error creating branch for PR");
                }),
              /* :: */[
                (function (param) {
                    return GraphQL$EggheadStatic.mutation(client, GraphQL$EggheadStatic.UpdateFileContentMutation.make(repoOwner, repoName, branchName, filePath, "Updated " + filePath, editedContent, sha, /* () */0), "Error updating file content");
                  }),
                /* :: */[
                  (function (param) {
                      return GraphQL$EggheadStatic.mutation(client, GraphQL$EggheadStatic.CreatePullRequestMutation.make(repoOwner, repoName, branchName, title + ("[by " + (username + "]")), "Submitted by user " + (String(username) + " (eggheadUser: seangrove)\n--\n") + body, "master", /* () */0), "Error creating PullRequest");
                    }),
                  /* [] */0
                ]
              ]
            ]);
}

function LessonEditor$Editor(Props) {
  var auth = Props.auth;
  var content = Props.content;
  var onInitiateSubmit = Props.onInitiateSubmit;
  var onLogout = Props.onLogout;
  var jwtMe = Props.jwtMe;
  var editorHandle = React.useRef(undefined);
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            var __x = OneGraphAuth.logout(auth, "github", undefined, /* () */0);
            __x.then((function (param) {
                    return Promise.resolve(OneGraphAuth.clearToken(auth));
                  }));
            return {
                    userId: undefined,
                    username: state.username,
                    gitHubLogin: state.gitHubLogin,
                    text: state.text,
                    isEditing: state.isEditing,
                    width: state.width
                  };
          } else {
            switch (action.tag | 0) {
              case /* Login */0 :
                  return {
                          userId: action[0],
                          username: state.username,
                          gitHubLogin: state.gitHubLogin,
                          text: state.text,
                          isEditing: state.isEditing,
                          width: state.width
                        };
              case /* SetEditing */1 :
                  return {
                          userId: state.userId,
                          username: state.username,
                          gitHubLogin: state.gitHubLogin,
                          text: state.text,
                          isEditing: action[0],
                          width: state.width
                        };
              case /* Resize */2 :
                  Belt_Option.map(editorHandle.current, (function (prim) {
                          prim.layout();
                          return /* () */0;
                        }));
                  return {
                          userId: state.userId,
                          username: state.username,
                          gitHubLogin: state.gitHubLogin,
                          text: state.text,
                          isEditing: state.isEditing,
                          width: action[0]
                        };
              
            }
          }
        }), {
        userId: getLocalUserId(auth),
        username: "",
        gitHubLogin: "",
        text: content,
        isEditing: true,
        width: 250
      });
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useState((function () {
          return true;
        }));
  var setIsHovered = match$1[1];
  var match$2 = React.useState((function () {
          return state.text;
        }));
  var setEditedText = match$2[1];
  var editedText = match$2[0];
  var match$3 = state.userId;
  var loginEl;
  if (match$3 !== undefined) {
    var match$4 = editedText === content;
    loginEl = React.createElement("div", undefined, React.createElement("span", undefined, "Logged in as " + OneJwt$EggheadStatic.findGitHubLogin("unknown", jwtMe)), React.createElement("button", {
              onClick: (function (param) {
                  return Curry._1(onLogout, /* () */0);
                })
            }, "Logout"), match$4 ? null : React.createElement("button", {
                style: {
                  position: "absolute",
                  right: "10px"
                },
                onClick: (function (param) {
                    return Curry._1(onInitiateSubmit, editedText);
                  })
              }, "Create PR"));
  } else {
    loginEl = React.createElement("button", {
          style: {
            width: "50%"
          },
          onClick: (function (param) {
              auth.login("github").then((function (param) {
                      var __x = auth.isLoggedIn("github");
                      return __x.then((function (isLoggedIn) {
                                    var tmp;
                                    if (isLoggedIn) {
                                      var userId = getLocalUserId(auth);
                                      tmp = userId !== undefined ? Curry._1(dispatch, /* Login */Block.__(0, [userId])) : /* () */0;
                                    } else {
                                      tmp = Curry._1(dispatch, /* Logout */0);
                                    }
                                    return Promise.resolve(tmp);
                                  }));
                    }));
              return /* () */0;
            })
        }, "Login with GitHub");
  }
  var rootWrapper = function (value) {
    return React.createElement("div", {
                onClick: (function ($$event) {
                    var match = $$event.altKey;
                    var match$1 = editorHandle.current;
                    if (match && match$1 !== undefined) {
                      var editorHandle$1 = Caml_option.valFromOption(match$1);
                      var target = $$event.target;
                      Belt_Option.map(extractSourcePosition(target.getAttribute("data-sourcepos")), (function (param) {
                              var to_ = param[1];
                              var from = param[0];
                              editorHandle$1.revealLine(from.line);
                              editorHandle$1.setSelection({
                                    startLineNumber: from.line,
                                    startColumn: from.char,
                                    endLineNumber: to_.line,
                                    endColumn: to_.char
                                  });
                              editorHandle$1.focus();
                              return /* () */0;
                            }));
                      return /* () */0;
                    } else {
                      return /* () */0;
                    }
                  })
              }, value.children);
  };
  var match$5 = state.isEditing;
  return React.createElement("div", undefined, match$5 ? React.createElement(ReactDraggable, {
                    cancel: ".react-monaco-editor-container",
                    children: React.createElement("div", {
                          id: "eggy-editor-container",
                          style: ReactDOMRe.Style.combine(match$1[0] ? activeEditorStyle : inactiveEditorStyle, {
                                width: String(state.width) + "px"
                              }),
                          onMouseEnter: (function (param) {
                              return Curry._1(setIsHovered, (function (param) {
                                            return true;
                                          }));
                            }),
                          onMouseLeave: (function (param) {
                              return Curry._1(setIsHovered, (function (param) {
                                            return false;
                                          }));
                            })
                        }, React.createElement("div", undefined, loginEl, React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(dispatch, /* SetEditing */Block.__(1, [false]));
                                    })
                                }, "Hide Editor")), React.createElement(ReactMonacoLazy$EggheadStatic.Editor.Lazy.make, {
                              height: "250px",
                              value: editedText,
                              language: "markdown",
                              theme: "vs-dark",
                              options: {
                                minimap: {
                                  enabled: false
                                }
                              },
                              onChange: (function (newValue, _event) {
                                  return Curry._1(setEditedText, (function (param) {
                                                return newValue;
                                              }));
                                }),
                              editorDidMount: (function (editor, _monaco) {
                                  editorHandle.current = Caml_option.some(editor);
                                  return /* () */0;
                                }),
                              className: "transcript-editor"
                            }))
                  }) : React.createElement("div", {
                    style: {
                      bottom: "0px",
                      left: "0px",
                      position: "fixed"
                    }
                  }, React.createElement("button", {
                        onClick: (function (param) {
                            return Curry._1(dispatch, /* SetEditing */Block.__(1, [true]));
                          })
                      }, "Show Editor")), React.createElement(ReactMarkdown, {
                  source: editedText,
                  onClick: (function ($$event) {
                      console.log("Please tell me this works", $$event);
                      return /* () */0;
                    }),
                  sourcePos: true,
                  renderers: {
                    root: rootWrapper
                  }
                }));
}

var Editor = {
  make: LessonEditor$Editor
};

function LessonEditor$PullRequestPreparation(Props) {
  var client = Props.client;
  var editedText = Props.editedText;
  var content = Props.content;
  var sha = Props.sha;
  var filePath = Props.filePath;
  var onClose = Props.onClose;
  var username = Props.username;
  var editorHandle = React.useRef(undefined);
  console.log("basic editor handle: ", editorHandle);
  Hooks$EggheadStatic.useWindowSize((function (size) {
          console.log("basic editor handle: ", editorHandle);
          console.log("Resize detected", editorHandle, size);
          var match = editorHandle.current;
          if (match !== undefined) {
            var editor = Caml_option.valFromOption(match);
            console.log("Resizing editor: ", (function (prim) {
                    prim.layout();
                    return /* () */0;
                  }), editor);
            editor.layout();
            return /* () */0;
          } else {
            return /* () */0;
          }
        }));
  var match = React.useReducer((function (state, action) {
          if (action.tag) {
            return {
                    title: state.title,
                    body: action[0]
                  };
          } else {
            return {
                    title: action[0],
                    body: state.body
                  };
          }
        }), {
        title: "",
        body: ""
      });
  var dispatch = match[1];
  var state = match[0];
  return React.createElement("div", {
              style: {
                display: "flex",
                alignContent: "stretch",
                alignItems: "stretch",
                flexDirection: "row",
                flexWrap: "nowrap",
                justifyContent: "space-around"
              }
            }, React.createElement("div", {
                  style: {
                    margin: "0px",
                    flex: "0 0 auto",
                    flexGrow: "1"
                  }
                }, React.createElement(React.Suspense, {
                      children: React.createElement(ReactMonacoLazy$EggheadStatic.DiffViewer.Lazy.make, {
                            height: "80vh",
                            original: content,
                            value: editedText,
                            language: "markdown",
                            theme: "vs-dark",
                            options: {
                              renderSideBySide: false
                            },
                            editorDidMount: (function (editor, _monaco) {
                                editorHandle.current = Caml_option.some(editor);
                                return /* () */0;
                              }),
                            className: "transcript-editor"
                          }),
                      fallback: React.createElement("div", undefined, "Loading...")
                    })), React.createElement("div", {
                  style: {
                    display: "flex",
                    alignContent: "stretch",
                    alignItems: "stretch",
                    flex: "0 0 auto",
                    flexDirection: "column",
                    flexWrap: "nowrap",
                    justifyContent: "flex-start"
                  }
                }, React.createElement("h4", undefined, "Title of your change"), React.createElement("input", {
                      type: "text",
                      value: state.title,
                      onChange: (function ($$event) {
                          return Curry._1(dispatch, /* SetTitle */Block.__(0, [$$event.target.value]));
                        })
                    }), React.createElement("h4", undefined, "Explanation of your change"), React.createElement("textarea", {
                      value: state.body,
                      onChange: (function ($$event) {
                          return Curry._1(dispatch, /* SetBody */Block.__(1, [$$event.target.value]));
                        })
                    }), React.createElement("button", {
                      onClick: (function (param) {
                          var submitPromise = submitPr(client, toBranchName(state.title, username), state.title, state.body, editedText, filePath, sha, username);
                          submitPromise.then((function (result) {
                                  if (result.tag) {
                                    console.log("Error creating PR: ", result[0]);
                                  } else {
                                    console.log("Ok, PR created!");
                                  }
                                  return Promise.resolve(Curry._1(onClose, /* () */0));
                                }));
                          return /* () */0;
                        })
                    }, "Submit PR"), React.createElement("button", {
                      style: {
                        marginTop: "auto"
                      },
                      onClick: (function (param) {
                          return Curry._1(onClose, /* () */0);
                        })
                    }, "Back to editing")));
}

var PullRequestPreparation = {
  make: LessonEditor$PullRequestPreparation
};

function LessonEditor$Conversation(Props) {
  var client = Props.client;
  var username = Props.username;
  var onHide = Props.onHide;
  var request = GraphQL$EggheadStatic.SearchForPullRequestsQuery.make("repo:OneGraph/egghead-asciicasts-experiment [by " + (String(username) + "] in:title"), 100, /* () */0);
  var match = Curry._5(ReasonUrql.Hooks.useQuery, request, /* NetworkOnly */971373850, undefined, undefined, /* () */0);
  var executeQuery = match[1];
  var response = match[0].response;
  console.log("Response: ", response);
  var tmp;
  if (typeof response === "number") {
    tmp = response === /* Fetching */0 ? React.createElement("div", undefined, "Loading conversation...") : React.createElement("div", undefined, "Not found");
  } else if (response.tag) {
    tmp = React.createElement("div", undefined, "Error loading conversation");
  } else {
    var pullRequests = GraphQL$EggheadStatic.filterGHConn(Belt_Option.map(response[0].gitHub, (function (d) {
                return d.search;
              })), (function (acc, next) {
            if (next !== undefined) {
              var match = next;
              if (typeof match === "number" || match[0] !== 736496359) {
                return acc;
              } else {
                return /* :: */[
                        match[1],
                        acc
                      ];
              }
            } else {
              return acc;
            }
          }));
    tmp = React.createElement(PullRequestManager$EggheadStatic.make, {
          client: client,
          pullRequests: pullRequests,
          myUsername: "sgrove",
          refresh: (function (param) {
              console.log(executeQuery);
              return Curry._1(executeQuery, undefined);
            }),
          onHide: onHide
        });
  }
  return React.createElement("div", undefined, tmp);
}

var Conversation = {
  make: LessonEditor$Conversation
};

function LessonEditor$ConversationBubble(Props) {
  var client = Props.client;
  var username = Props.username;
  var match = React.useReducer((function (state, action) {
          if (action) {
            return {
                    username: state.username,
                    isOpen: true
                  };
          } else {
            return {
                    username: state.username,
                    isOpen: false
                  };
          }
        }), {
        username: username,
        isOpen: false
      });
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.isOpen;
  var tmp;
  if (match$1) {
    tmp = React.createElement(LessonEditor$Conversation, {
          client: client,
          username: username,
          onHide: (function (param) {
              return Curry._1(dispatch, /* Hide */0);
            })
        });
  } else {
    var match$2 = state.isOpen;
    tmp = React.createElement("div", {
          style: {
            bottom: "10px",
            display: match$2 ? "none" : "block",
            position: "fixed",
            right: "10px"
          }
        }, React.createElement("button", {
              style: {
                backgroundColor: "black",
                border: "none",
                color: "white",
                cursor: "pointer",
                height: "60px",
                width: "60px",
                borderRadius: "50px"
              },
              onClick: (function (param) {
                  return Curry._1(dispatch, /* Show */1);
                })
            }, React.createElement(Icons$EggheadStatic.Chat.make, { })));
  }
  return React.createElement("div", {
              style: {
                height: "100vh",
                position: "fixed",
                right: "0px",
                top: "0px"
              }
            }, tmp);
}

var ConversationBubble = {
  make: LessonEditor$ConversationBubble
};

var modalStyle$1 = {
  overlay: {
    backgroundColor: "rgba(100, 100, 100, 0.75)"
  },
  content: ReactModal.defaultStyles
};

function LessonEditor$Container(Props) {
  var auth = Props.auth;
  var client = Props.client;
  var sha = Props.sha;
  var content = Props.content;
  var filePath = Props.filePath;
  var onLogout = Props.onLogout;
  var jwtMe = Props.jwtMe;
  var username = OneJwt$EggheadStatic.findGitHubLogin("unknown", jwtMe);
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            return {
                    userId: state.userId,
                    content: state.content,
                    title: state.title,
                    body: state.body,
                    mode: /* Editing */0
                  };
          } else {
            switch (action.tag | 0) {
              case /* SetTitle */0 :
                  return {
                          userId: state.userId,
                          content: state.content,
                          title: action[0],
                          body: state.body,
                          mode: state.mode
                        };
              case /* SetBody */1 :
                  return {
                          userId: state.userId,
                          content: state.content,
                          title: state.title,
                          body: action[0],
                          mode: state.mode
                        };
              case /* SetSubmitting */2 :
                  return {
                          userId: state.userId,
                          content: {
                            original: state.content.original,
                            edited: action[0]
                          },
                          title: state.title,
                          body: state.body,
                          mode: /* Submitting */1
                        };
              
            }
          }
        }), {
        userId: undefined,
        content: {
          original: content,
          edited: content
        },
        title: undefined,
        body: undefined,
        mode: /* Editing */0
      });
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.mode;
  if (match$1) {
    return React.createElement(ReactModal, {
                isOpen: true,
                style: modalStyle$1,
                ariaHideApp: false,
                children: React.createElement(LessonEditor$PullRequestPreparation, {
                      client: client,
                      editedText: state.content.edited,
                      content: state.content.original,
                      sha: sha,
                      filePath: filePath,
                      onClose: (function (param) {
                          return Curry._1(dispatch, /* SetContentEditing */0);
                        }),
                      username: OneJwt$EggheadStatic.findGitHubLogin("unknown", jwtMe)
                    })
              });
  } else {
    return React.createElement("div", undefined, React.createElement(LessonEditor$ConversationBubble, {
                    client: client,
                    username: username
                  }), React.createElement(React.Suspense, {
                    children: React.createElement(LessonEditor$Editor, {
                          auth: auth,
                          content: content,
                          onInitiateSubmit: (function (editedContent) {
                              return Curry._1(dispatch, /* SetSubmitting */Block.__(2, [editedContent]));
                            }),
                          onLogout: onLogout,
                          jwtMe: jwtMe
                        }),
                    fallback: React.createElement("div", undefined, "Loading editor...")
                  }));
  }
}

var Container = {
  modalStyle: modalStyle$1,
  make: LessonEditor$Container
};

function LessonEditor$Fetcher(Props) {
  var auth = Props.auth;
  var client = Props.client;
  var lesson = Props.lesson;
  Props.transcript;
  var filePath = "the-beginner-s-guide-to-figma/lessons/" + (lesson.slug + ".md");
  var match = React.useReducer((function (state, action) {
          if (action) {
            return {
                    missingAuthServices: state.missingAuthServices,
                    jwtMe: Caml_option.some(action[0])
                  };
          } else {
            return {
                    missingAuthServices: state.missingAuthServices,
                    jwtMe: undefined
                  };
          }
        }), {
        missingAuthServices: /* [] */0,
        jwtMe: getLocalJwtMe(auth)
      });
  var dispatch = match[1];
  var state = match[0];
  var request = GraphQL$EggheadStatic.GetFileShaAndContentQuery.make(repoName, repoOwner, "" + (String("master") + (":" + (String(filePath) + ""))), /* () */0);
  var loginButton = function (auth, service, onLogin) {
    return React.createElement("button", {
                style: {
                  width: "50%"
                },
                onClick: (function (param) {
                    var __x = auth.login(service);
                    __x.then((function (param) {
                            var __x = auth.isLoggedIn(service);
                            return __x.then((function (isLoggedIn) {
                                          return Promise.resolve(isLoggedIn ? Curry._1(onLogin, getLocalJwtMe(auth)) : Curry._1(dispatch, /* SetLoggedOut */0));
                                        }));
                          }));
                    return /* () */0;
                  })
              }, "Login with " + service);
  };
  var onLogout = function (param) {
    var __x = OneGraphAuth.logout(auth, "github", undefined, /* () */0);
    __x.then((function (_next) {
            return Promise.resolve(Curry._1(dispatch, /* SetLoggedOut */0));
          }));
    return /* () */0;
  };
  var match$1 = Curry._5(ReasonUrql.Hooks.useQuery, request, /* NetworkOnly */971373850, undefined, undefined, /* () */0);
  var response = match$1[0].response;
  var match$2 = state.jwtMe;
  if (match$2 !== undefined) {
    if (typeof response === "number") {
      if (response === /* Fetching */0) {
        return React.createElement("div", undefined, "Loading...");
      } else {
        return React.createElement("div", undefined, "Not found");
      }
    } else if (response.tag) {
      var graphQLErrors = response[0].graphQLErrors;
      var match$3 = OneGraphAuth.findMissingAuthServices(auth, graphQLErrors);
      if (match$3) {
        return React.createElement("div", undefined, "Please ", loginButton(auth, match$3[0], (function (jwtMe) {
                          if (jwtMe !== undefined) {
                            return Curry._1(dispatch, /* SetLoggedIn */[Caml_option.valFromOption(jwtMe)]);
                          } else {
                            return /* () */0;
                          }
                        })), " to edit lesson transcripts");
      } else {
        return React.createElement("div", undefined, "Error: " + JSON.stringify(graphQLErrors, null, 2), React.createElement("button", {
                        onClick: (function (param) {
                            var __x = OneGraphAuth.logout(auth, "github", undefined, /* () */0);
                            __x.then((function (_next) {
                                    return Promise.resolve(Curry._1(dispatch, /* SetLoggedOut */0));
                                  }));
                            return /* () */0;
                          })
                      }, "Logout"));
      }
    } else {
      var data = response[0];
      var blob = Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(data.gitHub, (function (d) {
                      return d.repository;
                    })), (function (d) {
                  return d.object_;
                })), (function (param) {
              if (param[0] >= -565457906) {
                return ;
              } else {
                return Caml_option.some(param[1]);
              }
            }));
      var sha = Belt_Option.map(blob, (function (d) {
              return d.oid;
            }));
      var content = Belt_Option.flatMap(blob, (function (d) {
              return d.text;
            }));
      var match$4 = state.jwtMe;
      if (sha !== undefined) {
        if (content !== undefined) {
          if (match$4 !== undefined) {
            return React.createElement(LessonEditor$Container, {
                        auth: auth,
                        client: client,
                        sha: sha,
                        content: content,
                        filePath: filePath,
                        onLogout: onLogout,
                        jwtMe: Caml_option.valFromOption(match$4)
                      });
          } else {
            return React.createElement("pre", undefined, "Unable to ascertain local user");
          }
        } else {
          return React.createElement("pre", undefined, "No content to edit");
        }
      } else {
        return React.createElement(React.Fragment, undefined, "Unable to determine sha: ", React.createElement("pre", undefined, JSON.stringify(data, null, 2)));
      }
    }
  } else {
    return React.createElement("div", undefined, "Please ", loginButton(auth, "github", (function (jwtMe) {
                      if (jwtMe !== undefined) {
                        return Curry._1(dispatch, /* SetLoggedIn */[Caml_option.valFromOption(jwtMe)]);
                      } else {
                        return /* () */0;
                      }
                    })), " to edit lesson transcripts");
  }
}

var Fetcher = {
  make: LessonEditor$Fetcher
};

function LessonEditor(Props) {
  var lesson = Props.lesson;
  var transcript = Props.transcript;
  var match = React.useState((function () {
          return true;
        }));
  if (Config$EggheadStatic.auth !== undefined && GraphQL$EggheadStatic.urqlClient !== undefined) {
    var client = Caml_option.valFromOption(GraphQL$EggheadStatic.urqlClient);
    return React.createElement(Urql.Provider, {
                value: client,
                children: match[0] ? React.createElement(LessonEditor$Fetcher, {
                        auth: Caml_option.valFromOption(Config$EggheadStatic.auth),
                        client: client,
                        lesson: lesson,
                        transcript: transcript
                      }) : React.createElement(LessonEditor$ReadOnly, {
                        lesson: lesson,
                        transcript: transcript
                      })
              });
  } else {
    return "Loading lesson editor...";
  }
}

var make = LessonEditor;

var $$default = LessonEditor;

export {
  assign ,
  Utils ,
  OneGraphAuth$1 as OneGraphAuth,
  ReactResizable ,
  ReactMarkdown$1 as ReactMarkdown,
  ReactDraggable$1 as ReactDraggable,
  ReactModal$1 as ReactModal,
  ReactDiffViewer ,
  repoOwner ,
  repoName ,
  Egghead ,
  ReadOnly ,
  modalStyle ,
  activeEditorStyle ,
  inactiveEditorStyle ,
  textEditorStyle ,
  submitPr ,
  Editor ,
  PullRequestPreparation ,
  Conversation ,
  ConversationBubble ,
  Container ,
  Fetcher ,
  make ,
  $$default ,
  $$default as default,
  
}
/* assign Not a pure module */
