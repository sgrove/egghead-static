// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.js";
import * as Wonka from "wonka/src/wonka.js";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as $$Promise from "reason-promise/src/js/promise.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as OneGraphAuth from "bs-onegraph-auth/src/OneGraphAuth.bs.js";
import * as Config$EggheadStatic from "../lib/Config.bs.js";

var urqlClient;

if (Config$EggheadStatic.auth !== undefined) {
  var auth = Caml_option.valFromOption(Config$EggheadStatic.auth);
  urqlClient = Caml_option.some(Curry._6(ReasonUrql.Client.make, Config$EggheadStatic.oneGraphUrl, /* FetchFn */Block.__(1, [(function (param) {
                  var match = OneGraphAuth.authHeaders(auth);
                  var headers = match !== undefined ? ({
                        Authorization: match
                      }) : undefined;
                  return Fetch.RequestInit.make(undefined, headers, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0);
                })]), undefined, undefined, undefined, /* () */0));
} else {
  urqlClient = undefined;
}

var ppx_printed_query = "query FindSourceRepositoryIdQuery($repoOwner: String!, $repoName: String!)  {\ngitHub  {\nrepository(owner: $repoOwner, name: $repoName)  {\nid  \n}\n\n}\n\n}\n";

function parse(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "repository");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$6);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubRepository is missing");
          }
          tmp$1 = {
            id: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        repository: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make(repoOwner, repoName, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var repoOwner = variables.repoOwner;
  var repoName = variables.repoName;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse
        };
}

function makeVariables(repoOwner, repoName, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002(graphql_ppx_use_json_variables_fn, repoOwner, repoName, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition = /* tuple */[
  parse,
  ppx_printed_query,
  definition_002
];

function ret_type(f) {
  return { };
}

var MT_Ret = { };

var FindSourceRepositoryIdQuery = {
  ppx_printed_query: ppx_printed_query,
  query: ppx_printed_query,
  parse: parse,
  make: make,
  makeWithVariables: makeWithVariables,
  makeVariables: makeVariables,
  definition: definition,
  ret_type: ret_type,
  MT_Ret: MT_Ret
};

var ppx_printed_query$1 = "query GetFileSha($repoName: String!, $repoOwner: String!, $branchAndFilePath: String!)  {\ngitHub  {\nrepository(name: $repoName, owner: $repoOwner)  {\nobject_: object(expression: $branchAndFilePath)  {\n__typename\n...on GitHubBlob   {\noid  \ntext  \n}\n\n}\n\n}\n\n}\n\n}\n";

function parse$1(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "repository");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "object_");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$6);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeObject(value$6);
              var tmp$3;
              if (match$6 !== undefined) {
                var match$7 = Js_dict.get(Caml_option.valFromOption(match$6), "__typename");
                if (match$7 !== undefined) {
                  var match$8 = Js_json.decodeString(Caml_option.valFromOption(match$7));
                  if (match$8 !== undefined) {
                    if (match$8 === "GitHubBlob") {
                      var value$7 = Js_option.getExn(Js_json.decodeObject(value$6));
                      var match$9 = Js_dict.get(value$7, "oid");
                      var tmp$4;
                      if (match$9 !== undefined) {
                        var value$8 = Caml_option.valFromOption(match$9);
                        var match$10 = Js_json.decodeString(value$8);
                        tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                      } else {
                        tmp$4 = Js_exn.raiseError("graphql_ppx: Field oid on type GitHubBlob is missing");
                      }
                      var match$11 = Js_dict.get(value$7, "text");
                      var tmp$5;
                      if (match$11 !== undefined) {
                        var value$9 = Caml_option.valFromOption(match$11);
                        var match$12 = Js_json.decodeNull(value$9);
                        if (match$12 !== undefined) {
                          tmp$5 = undefined;
                        } else {
                          var match$13 = Js_json.decodeString(value$9);
                          tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                        }
                      } else {
                        tmp$5 = undefined;
                      }
                      tmp$3 = /* `GitHubBlob */[
                        -678893856,
                        {
                          oid: tmp$4,
                          text: tmp$5
                        }
                      ];
                    } else {
                      tmp$3 = /* `GitHubGitObject */[
                        -565457906,
                        (Js_option.getExn(Js_json.decodeObject(value$6)), { })
                      ];
                    }
                  } else {
                    tmp$3 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubGitObject has a __typename field that is not a string");
                  }
                } else {
                  tmp$3 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubGitObject is missing the __typename field");
                }
              } else {
                tmp$3 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubGitObject to be an object, got " + JSON.stringify(value$6));
              }
              tmp$2 = tmp$3;
            }
          } else {
            tmp$2 = undefined;
          }
          tmp$1 = {
            object_: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        repository: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$1(repoName, repoOwner, branchAndFilePath, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "branchAndFilePath",
                    branchAndFilePath
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var repoName = variables.repoName;
  var repoOwner = variables.repoOwner;
  var branchAndFilePath = variables.branchAndFilePath;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "branchAndFilePath",
                    branchAndFilePath
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$1
        };
}

function makeVariables$1(repoName, repoOwner, branchAndFilePath, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoName",
                  repoName
                ],
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "branchAndFilePath",
                  branchAndFilePath
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$1(graphql_ppx_use_json_variables_fn, repoName, repoOwner, branchAndFilePath, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoName",
                      repoName
                    ],
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "branchAndFilePath",
                      branchAndFilePath
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$1 = /* tuple */[
  parse$1,
  ppx_printed_query$1,
  definition_002$1
];

function ret_type$1(f) {
  return { };
}

var MT_Ret$1 = { };

var GetFileShaAndContentQuery = {
  ppx_printed_query: ppx_printed_query$1,
  query: ppx_printed_query$1,
  parse: parse$1,
  make: make$1,
  makeWithVariables: makeWithVariables$1,
  makeVariables: makeVariables$1,
  definition: definition$1,
  ret_type: ret_type$1,
  MT_Ret: MT_Ret$1
};

var ppx_printed_query$2 = "mutation ForkGitHubRepoMutation($repoOwner: String!, $repoName: String!)  {\ngitHub  {\ncreateFork_oneGraph(input: {repoOwner: $repoOwner, repoName: $repoName})  {\nrepository  {\nnameWithOwner  \n}\n\n}\n\n}\n\n}\n";

function parse$2(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "createFork_oneGraph");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$2)));
        var match$3 = Js_dict.get(value$4, "repository");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
          var match$4 = Js_dict.get(value$5, "nameWithOwner");
          var tmp$3;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$6);
            tmp$3 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field nameWithOwner on type GitHubRepository is missing");
          }
          tmp$2 = {
            nameWithOwner: tmp$3
          };
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field repository on type GitHubCreateFork_oneGraphResponsePayload is missing");
        }
        tmp$1 = {
          repository: tmp$2
        };
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field createFork_oneGraph on type GitHubMutation is missing");
      }
      tmp = {
        createFork_oneGraph: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$2(repoOwner, repoName, param) {
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeWithVariables$2(variables) {
  var repoOwner = variables.repoOwner;
  var repoName = variables.repoName;
  return {
          query: ppx_printed_query$2,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$2
        };
}

function makeVariables$2(repoOwner, repoName, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$2(graphql_ppx_use_json_variables_fn, repoOwner, repoName, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$2 = /* tuple */[
  parse$2,
  ppx_printed_query$2,
  definition_002$2
];

function ret_type$2(f) {
  return { };
}

var MT_Ret$2 = { };

var ForkGitHubRepoMutation = {
  ppx_printed_query: ppx_printed_query$2,
  query: ppx_printed_query$2,
  parse: parse$2,
  make: make$2,
  makeWithVariables: makeWithVariables$2,
  makeVariables: makeVariables$2,
  definition: definition$2,
  ret_type: ret_type$2,
  MT_Ret: MT_Ret$2
};

var ppx_printed_query$3 = "query DoIHaveARepoQuery($repoOwner: String!, $repoName: String!)  {\ngitHub  {\nrepository(owner: $repoOwner, name: $repoName)  {\nid  \n}\n\n}\n\n}\n";

function parse$3(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "repository");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "id");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$6);
            tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubRepository is missing");
          }
          tmp$1 = {
            id: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        repository: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$3(repoOwner, repoName, param) {
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeWithVariables$3(variables) {
  var repoOwner = variables.repoOwner;
  var repoName = variables.repoName;
  return {
          query: ppx_printed_query$3,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$3
        };
}

function makeVariables$3(repoOwner, repoName, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$3(graphql_ppx_use_json_variables_fn, repoOwner, repoName, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$3 = /* tuple */[
  parse$3,
  ppx_printed_query$3,
  definition_002$3
];

function ret_type$3(f) {
  return { };
}

var MT_Ret$3 = { };

var DoIHaveARepoQuery = {
  ppx_printed_query: ppx_printed_query$3,
  query: ppx_printed_query$3,
  parse: parse$3,
  make: make$3,
  makeWithVariables: makeWithVariables$3,
  makeVariables: makeVariables$3,
  definition: definition$3,
  ret_type: ret_type$3,
  MT_Ret: MT_Ret$3
};

var ppx_printed_query$4 = "mutation CreateBranchMutation($repoOwner: String!, $repoName: String!, $branchName: String!)  {\ngitHub  {\ncreateBranch_oneGraph(input: {branchName: $branchName, repoName: $repoName, repoOwner: $repoOwner})  {\nref_: ref  {\nname  \nid  \n}\n\n}\n\n}\n\n}\n";

function parse$4(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "createBranch_oneGraph");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$2)));
        var match$3 = Js_dict.get(value$4, "ref_");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
          var match$4 = Js_dict.get(value$5, "name");
          var tmp$3;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$6);
            tmp$3 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field name on type GitHubRef is missing");
          }
          var match$6 = Js_dict.get(value$5, "id");
          var tmp$4;
          if (match$6 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeString(value$7);
            tmp$4 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubRef is missing");
          }
          tmp$2 = {
            name: tmp$3,
            id: tmp$4
          };
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field ref_ on type GitHubCreateBranch_oneGraphResponsePayload is missing");
        }
        tmp$1 = {
          ref_: tmp$2
        };
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field createBranch_oneGraph on type GitHubMutation is missing");
      }
      tmp = {
        createBranch_oneGraph: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$4(repoOwner, repoName, branchName, param) {
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "branchName",
                    branchName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeWithVariables$4(variables) {
  var repoOwner = variables.repoOwner;
  var repoName = variables.repoName;
  var branchName = variables.branchName;
  return {
          query: ppx_printed_query$4,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "branchName",
                    branchName
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$4
        };
}

function makeVariables$4(repoOwner, repoName, branchName, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ],
                /* tuple */[
                  "branchName",
                  branchName
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$4(graphql_ppx_use_json_variables_fn, repoOwner, repoName, branchName, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ],
                    /* tuple */[
                      "branchName",
                      branchName
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$4 = /* tuple */[
  parse$4,
  ppx_printed_query$4,
  definition_002$4
];

function ret_type$4(f) {
  return { };
}

var MT_Ret$4 = { };

var CreateBranchMutation = {
  ppx_printed_query: ppx_printed_query$4,
  query: ppx_printed_query$4,
  parse: parse$4,
  make: make$4,
  makeWithVariables: makeWithVariables$4,
  makeVariables: makeVariables$4,
  definition: definition$4,
  ret_type: ret_type$4,
  MT_Ret: MT_Ret$4
};

var ppx_printed_query$5 = "mutation UpdateFileMutation($repoOwner: String!, $repoName: String!, $branchName: String!, $path: String!, $message: String!, $content: String!, $sha: String!)  {\ngitHub  {\ncreateOrUpdateFileContent_oneGraph(input: {message: $message, path: $path, repoName: $repoName, repoOwner: $repoOwner, branchName: $branchName, plainContent: $content, existingFileSha: $sha})  {\ncommit  {\nmessage  \n}\n\n}\n\n}\n\n}\n";

function parse$5(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "createOrUpdateFileContent_oneGraph");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$2)));
        var match$3 = Js_dict.get(value$4, "commit");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
          var match$4 = Js_dict.get(value$5, "message");
          var tmp$3;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$6);
            tmp$3 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field message on type GitHubCommit is missing");
          }
          tmp$2 = {
            message: tmp$3
          };
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field commit on type GitHubCreateOrUpdateFileContent_oneGraphResponsePayload is missing");
        }
        tmp$1 = {
          commit: tmp$2
        };
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field createOrUpdateFileContent_oneGraph on type GitHubMutation is missing");
      }
      tmp = {
        createOrUpdateFileContent_oneGraph: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$5(repoOwner, repoName, branchName, path, message, content, sha, param) {
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "branchName",
                    branchName
                  ],
                  /* tuple */[
                    "path",
                    path
                  ],
                  /* tuple */[
                    "message",
                    message
                  ],
                  /* tuple */[
                    "content",
                    content
                  ],
                  /* tuple */[
                    "sha",
                    sha
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeWithVariables$5(variables) {
  var repoOwner = variables.repoOwner;
  var repoName = variables.repoName;
  var branchName = variables.branchName;
  var path = variables.path;
  var message = variables.message;
  var content = variables.content;
  var sha = variables.sha;
  return {
          query: ppx_printed_query$5,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "branchName",
                    branchName
                  ],
                  /* tuple */[
                    "path",
                    path
                  ],
                  /* tuple */[
                    "message",
                    message
                  ],
                  /* tuple */[
                    "content",
                    content
                  ],
                  /* tuple */[
                    "sha",
                    sha
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$5
        };
}

function makeVariables$5(repoOwner, repoName, branchName, path, message, content, sha, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ],
                /* tuple */[
                  "branchName",
                  branchName
                ],
                /* tuple */[
                  "path",
                  path
                ],
                /* tuple */[
                  "message",
                  message
                ],
                /* tuple */[
                  "content",
                  content
                ],
                /* tuple */[
                  "sha",
                  sha
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$5(graphql_ppx_use_json_variables_fn, repoOwner, repoName, branchName, path, message, content, sha, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ],
                    /* tuple */[
                      "branchName",
                      branchName
                    ],
                    /* tuple */[
                      "path",
                      path
                    ],
                    /* tuple */[
                      "message",
                      message
                    ],
                    /* tuple */[
                      "content",
                      content
                    ],
                    /* tuple */[
                      "sha",
                      sha
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$5 = /* tuple */[
  parse$5,
  ppx_printed_query$5,
  definition_002$5
];

function ret_type$5(f) {
  return { };
}

var MT_Ret$5 = { };

var UpdateFileContentMutation = {
  ppx_printed_query: ppx_printed_query$5,
  query: ppx_printed_query$5,
  parse: parse$5,
  make: make$5,
  makeWithVariables: makeWithVariables$5,
  makeVariables: makeVariables$5,
  definition: definition$5,
  ret_type: ret_type$5,
  MT_Ret: MT_Ret$5
};

var ppx_printed_query$6 = "mutation CreatePullRequestMutation($repoId: ID!, $title: String!, $headRefName: String!, $baseRefName: String!, $body: String!)  {\ngitHub  {\ncreatePullRequest(input: {title: $title, headRefName: $headRefName, baseRefName: $baseRefName, repositoryId: $repoId, maintainerCanModify: true, body: $body})  {\npullRequest  {\nurl  \nid  \nnumber  \ntitle  \npermalink  \n}\n\n}\n\n}\n\n}\n";

function parse$6(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "createPullRequest");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "pullRequest");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$6);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var value$7 = Js_option.getExn(Js_json.decodeObject(value$6));
              var match$6 = Js_dict.get(value$7, "url");
              var tmp$3;
              if (match$6 !== undefined) {
                var value$8 = Caml_option.valFromOption(match$6);
                var match$7 = Js_json.decodeString(value$8);
                tmp$3 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
              } else {
                tmp$3 = Js_exn.raiseError("graphql_ppx: Field url on type GitHubPullRequest is missing");
              }
              var match$8 = Js_dict.get(value$7, "id");
              var tmp$4;
              if (match$8 !== undefined) {
                var value$9 = Caml_option.valFromOption(match$8);
                var match$9 = Js_json.decodeString(value$9);
                tmp$4 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
              } else {
                tmp$4 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubPullRequest is missing");
              }
              var match$10 = Js_dict.get(value$7, "number");
              var tmp$5;
              if (match$10 !== undefined) {
                var value$10 = Caml_option.valFromOption(match$10);
                var match$11 = Js_json.decodeNumber(value$10);
                tmp$5 = match$11 !== undefined ? match$11 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$10));
              } else {
                tmp$5 = Js_exn.raiseError("graphql_ppx: Field number on type GitHubPullRequest is missing");
              }
              var match$12 = Js_dict.get(value$7, "title");
              var tmp$6;
              if (match$12 !== undefined) {
                var value$11 = Caml_option.valFromOption(match$12);
                var match$13 = Js_json.decodeString(value$11);
                tmp$6 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
              } else {
                tmp$6 = Js_exn.raiseError("graphql_ppx: Field title on type GitHubPullRequest is missing");
              }
              var match$14 = Js_dict.get(value$7, "permalink");
              var tmp$7;
              if (match$14 !== undefined) {
                var value$12 = Caml_option.valFromOption(match$14);
                var match$15 = Js_json.decodeString(value$12);
                tmp$7 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
              } else {
                tmp$7 = Js_exn.raiseError("graphql_ppx: Field permalink on type GitHubPullRequest is missing");
              }
              tmp$2 = {
                url: tmp$3,
                id: tmp$4,
                number: tmp$5,
                title: tmp$6,
                permalink: tmp$7
              };
            }
          } else {
            tmp$2 = undefined;
          }
          tmp$1 = {
            pullRequest: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        createPullRequest: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$6(repoId, title, headRefName, baseRefName, body, param) {
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoId",
                    repoId
                  ],
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "headRefName",
                    headRefName
                  ],
                  /* tuple */[
                    "baseRefName",
                    baseRefName
                  ],
                  /* tuple */[
                    "body",
                    body
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$6
        };
}

function makeWithVariables$6(variables) {
  var repoId = variables.repoId;
  var title = variables.title;
  var headRefName = variables.headRefName;
  var baseRefName = variables.baseRefName;
  var body = variables.body;
  return {
          query: ppx_printed_query$6,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoId",
                    repoId
                  ],
                  /* tuple */[
                    "title",
                    title
                  ],
                  /* tuple */[
                    "headRefName",
                    headRefName
                  ],
                  /* tuple */[
                    "baseRefName",
                    baseRefName
                  ],
                  /* tuple */[
                    "body",
                    body
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$6
        };
}

function makeVariables$6(repoId, title, headRefName, baseRefName, body, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoId",
                  repoId
                ],
                /* tuple */[
                  "title",
                  title
                ],
                /* tuple */[
                  "headRefName",
                  headRefName
                ],
                /* tuple */[
                  "baseRefName",
                  baseRefName
                ],
                /* tuple */[
                  "body",
                  body
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$6(graphql_ppx_use_json_variables_fn, repoId, title, headRefName, baseRefName, body, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoId",
                      repoId
                    ],
                    /* tuple */[
                      "title",
                      title
                    ],
                    /* tuple */[
                      "headRefName",
                      headRefName
                    ],
                    /* tuple */[
                      "baseRefName",
                      baseRefName
                    ],
                    /* tuple */[
                      "body",
                      body
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$6 = /* tuple */[
  parse$6,
  ppx_printed_query$6,
  definition_002$6
];

function ret_type$6(f) {
  return { };
}

var MT_Ret$6 = { };

var CreatePullRequestMutation = {
  ppx_printed_query: ppx_printed_query$6,
  query: ppx_printed_query$6,
  parse: parse$6,
  make: make$6,
  makeWithVariables: makeWithVariables$6,
  makeVariables: makeVariables$6,
  definition: definition$6,
  ret_type: ret_type$6,
  MT_Ret: MT_Ret$6
};

var ppx_printed_query$7 = "mutation AddLabelToPullRequestMutation($labelIds: [ID!]!, $labelableId: ID!)  {\ngitHub  {\naddLabelsToLabelable(input: {labelIds: $labelIds, labelableId: $labelableId})  {\nclientMutationId  \nlabelable  {\n__typename\nlabels  {\nnodes  {\nname  \n}\n\n}\n\n}\n\n}\n\n}\n\n}\n";

function parse$7(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "addLabelsToLabelable");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "clientMutationId");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$6);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$6);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$2 = undefined;
          }
          var match$7 = Js_dict.get(value$5, "labelable");
          var tmp$3;
          if (match$7 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$7);
            var match$8 = Js_json.decodeNull(value$7);
            if (match$8 !== undefined) {
              tmp$3 = undefined;
            } else {
              var match$9 = Js_json.decodeObject(value$7);
              var tmp$4;
              if (match$9 !== undefined) {
                var match$10 = Js_dict.get(Caml_option.valFromOption(match$9), "__typename");
                if (match$10 !== undefined) {
                  var match$11 = Js_json.decodeString(Caml_option.valFromOption(match$10));
                  if (match$11 !== undefined) {
                    var value$8 = Js_option.getExn(Js_json.decodeObject(value$7));
                    var match$12 = Js_dict.get(value$8, "labels");
                    var tmp$5;
                    if (match$12 !== undefined) {
                      var value$9 = Caml_option.valFromOption(match$12);
                      var match$13 = Js_json.decodeNull(value$9);
                      if (match$13 !== undefined) {
                        tmp$5 = undefined;
                      } else {
                        var value$10 = Js_option.getExn(Js_json.decodeObject(value$9));
                        var match$14 = Js_dict.get(value$10, "nodes");
                        var tmp$6;
                        if (match$14 !== undefined) {
                          var value$11 = Caml_option.valFromOption(match$14);
                          var match$15 = Js_json.decodeNull(value$11);
                          tmp$6 = match$15 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$11)).map((function (value) {
                                    var match = Js_json.decodeNull(value);
                                    if (match !== undefined) {
                                      return ;
                                    } else {
                                      var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                      var match$1 = Js_dict.get(value$1, "name");
                                      var tmp;
                                      if (match$1 !== undefined) {
                                        var value$2 = Caml_option.valFromOption(match$1);
                                        var match$2 = Js_json.decodeString(value$2);
                                        tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                      } else {
                                        tmp = Js_exn.raiseError("graphql_ppx: Field name on type GitHubLabel is missing");
                                      }
                                      return {
                                              name: tmp
                                            };
                                    }
                                  }));
                        } else {
                          tmp$6 = undefined;
                        }
                        tmp$5 = {
                          nodes: tmp$6
                        };
                      }
                    } else {
                      tmp$5 = undefined;
                    }
                    tmp$4 = /* `GitHubLabelable */[
                      -824999637,
                      {
                        labels: tmp$5
                      }
                    ];
                  } else {
                    tmp$4 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubLabelable has a __typename field that is not a string");
                  }
                } else {
                  tmp$4 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubLabelable is missing the __typename field");
                }
              } else {
                tmp$4 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubLabelable to be an object, got " + JSON.stringify(value$7));
              }
              tmp$3 = tmp$4;
            }
          } else {
            tmp$3 = undefined;
          }
          tmp$1 = {
            clientMutationId: tmp$2,
            labelable: tmp$3
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        addLabelsToLabelable: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$7(labelIds, labelableId, param) {
  return {
          query: ppx_printed_query$7,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "labelIds",
                    labelIds.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "labelableId",
                    labelableId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$7
        };
}

function makeWithVariables$7(variables) {
  var labelIds = variables.labelIds;
  var labelableId = variables.labelableId;
  return {
          query: ppx_printed_query$7,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "labelIds",
                    labelIds.map((function (prim) {
                            return prim;
                          }))
                  ],
                  /* tuple */[
                    "labelableId",
                    labelableId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$7
        };
}

function makeVariables$7(labelIds, labelableId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "labelIds",
                  labelIds.map((function (prim) {
                          return prim;
                        }))
                ],
                /* tuple */[
                  "labelableId",
                  labelableId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$7(graphql_ppx_use_json_variables_fn, labelIds, labelableId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "labelIds",
                      labelIds.map((function (prim) {
                              return prim;
                            }))
                    ],
                    /* tuple */[
                      "labelableId",
                      labelableId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$7 = /* tuple */[
  parse$7,
  ppx_printed_query$7,
  definition_002$7
];

function ret_type$7(f) {
  return { };
}

var MT_Ret$7 = { };

var AddLabelsToPullRequestMutation = {
  ppx_printed_query: ppx_printed_query$7,
  query: ppx_printed_query$7,
  parse: parse$7,
  make: make$7,
  makeWithVariables: makeWithVariables$7,
  makeVariables: makeVariables$7,
  definition: definition$7,
  ret_type: ret_type$7,
  MT_Ret: MT_Ret$7
};

var ppx_printed_query$8 = "query GetPullRequestsQuery($filterTag: [String!], $repoName: String!, $repoOwner: String!, $limit: Int!)  {\ngitHub  {\nrepository(name: $repoName, owner: $repoOwner)  {\npullRequests(orderBy: {direction: DESC, field: CREATED_AT}, first: $limit, states: OPEN, labels: $filterTag)  {\nnodes  {\nnumber  \nid  \ntitle  \nbody  \nisCrossRepository  \ncomments(last: 20)  {\nnodes  {\nid  \nbodyText  \nauthor  {\n__typename\nlogin  \navatarUrl  \n}\n\ncreatedAt  \n}\n\n}\n\nbaseRefName  \nheadRef  {\nprefix  \nname  \nid  \ntarget  {\n__typename\nid  \noid  \nrepository  {\nowner  {\n__typename\nlogin  \nid  \n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n";

function parse$8(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "repository");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "pullRequests");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$4)));
            var match$5 = Js_dict.get(value$6, "nodes");
            var tmp$3;
            if (match$5 !== undefined) {
              var value$7 = Caml_option.valFromOption(match$5);
              var match$6 = Js_json.decodeNull(value$7);
              tmp$3 = match$6 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$7)).map((function (value) {
                        var match = Js_json.decodeNull(value);
                        if (match !== undefined) {
                          return ;
                        } else {
                          var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                          var match$1 = Js_dict.get(value$1, "number");
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$2 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_json.decodeNumber(value$2);
                            tmp = match$2 !== undefined ? match$2 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Field number on type GitHubPullRequest is missing");
                          }
                          var match$3 = Js_dict.get(value$1, "id");
                          var tmp$1;
                          if (match$3 !== undefined) {
                            var value$3 = Caml_option.valFromOption(match$3);
                            var match$4 = Js_json.decodeString(value$3);
                            tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                          } else {
                            tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubPullRequest is missing");
                          }
                          var match$5 = Js_dict.get(value$1, "title");
                          var tmp$2;
                          if (match$5 !== undefined) {
                            var value$4 = Caml_option.valFromOption(match$5);
                            var match$6 = Js_json.decodeString(value$4);
                            tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                          } else {
                            tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type GitHubPullRequest is missing");
                          }
                          var match$7 = Js_dict.get(value$1, "body");
                          var tmp$3;
                          if (match$7 !== undefined) {
                            var value$5 = Caml_option.valFromOption(match$7);
                            var match$8 = Js_json.decodeString(value$5);
                            tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                          } else {
                            tmp$3 = Js_exn.raiseError("graphql_ppx: Field body on type GitHubPullRequest is missing");
                          }
                          var match$9 = Js_dict.get(value$1, "isCrossRepository");
                          var tmp$4;
                          if (match$9 !== undefined) {
                            var value$6 = Caml_option.valFromOption(match$9);
                            var match$10 = Js_json.decodeBoolean(value$6);
                            tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$6));
                          } else {
                            tmp$4 = Js_exn.raiseError("graphql_ppx: Field isCrossRepository on type GitHubPullRequest is missing");
                          }
                          var match$11 = Js_dict.get(value$1, "comments");
                          var tmp$5;
                          if (match$11 !== undefined) {
                            var value$7 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$11)));
                            var match$12 = Js_dict.get(value$7, "nodes");
                            var tmp$6;
                            if (match$12 !== undefined) {
                              var value$8 = Caml_option.valFromOption(match$12);
                              var match$13 = Js_json.decodeNull(value$8);
                              tmp$6 = match$13 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$8)).map((function (value) {
                                        var match = Js_json.decodeNull(value);
                                        if (match !== undefined) {
                                          return ;
                                        } else {
                                          var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                          var match$1 = Js_dict.get(value$1, "id");
                                          var tmp;
                                          if (match$1 !== undefined) {
                                            var value$2 = Caml_option.valFromOption(match$1);
                                            var match$2 = Js_json.decodeString(value$2);
                                            tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                          } else {
                                            tmp = Js_exn.raiseError("graphql_ppx: Field id on type GitHubIssueComment is missing");
                                          }
                                          var match$3 = Js_dict.get(value$1, "bodyText");
                                          var tmp$1;
                                          if (match$3 !== undefined) {
                                            var value$3 = Caml_option.valFromOption(match$3);
                                            var match$4 = Js_json.decodeString(value$3);
                                            tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                          } else {
                                            tmp$1 = Js_exn.raiseError("graphql_ppx: Field bodyText on type GitHubIssueComment is missing");
                                          }
                                          var match$5 = Js_dict.get(value$1, "author");
                                          var tmp$2;
                                          if (match$5 !== undefined) {
                                            var value$4 = Caml_option.valFromOption(match$5);
                                            var match$6 = Js_json.decodeNull(value$4);
                                            if (match$6 !== undefined) {
                                              tmp$2 = undefined;
                                            } else {
                                              var match$7 = Js_json.decodeObject(value$4);
                                              var tmp$3;
                                              if (match$7 !== undefined) {
                                                var match$8 = Js_dict.get(Caml_option.valFromOption(match$7), "__typename");
                                                if (match$8 !== undefined) {
                                                  var match$9 = Js_json.decodeString(Caml_option.valFromOption(match$8));
                                                  if (match$9 !== undefined) {
                                                    var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
                                                    var match$10 = Js_dict.get(value$5, "avatarUrl");
                                                    var tmp$4;
                                                    if (match$10 !== undefined) {
                                                      var value$6 = Caml_option.valFromOption(match$10);
                                                      var match$11 = Js_json.decodeString(value$6);
                                                      tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                                    } else {
                                                      tmp$4 = Js_exn.raiseError("graphql_ppx: Field avatarUrl on type GitHubActor is missing");
                                                    }
                                                    var match$12 = Js_dict.get(value$5, "login");
                                                    var tmp$5;
                                                    if (match$12 !== undefined) {
                                                      var value$7 = Caml_option.valFromOption(match$12);
                                                      var match$13 = Js_json.decodeString(value$7);
                                                      tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                                                    } else {
                                                      tmp$5 = Js_exn.raiseError("graphql_ppx: Field login on type GitHubActor is missing");
                                                    }
                                                    tmp$3 = /* `GitHubActor */[
                                                      652964882,
                                                      {
                                                        avatarUrl: tmp$4,
                                                        login: tmp$5
                                                      }
                                                    ];
                                                  } else {
                                                    tmp$3 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubActor has a __typename field that is not a string");
                                                  }
                                                } else {
                                                  tmp$3 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubActor is missing the __typename field");
                                                }
                                              } else {
                                                tmp$3 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubActor to be an object, got " + JSON.stringify(value$4));
                                              }
                                              tmp$2 = tmp$3;
                                            }
                                          } else {
                                            tmp$2 = undefined;
                                          }
                                          var match$14 = Js_dict.get(value$1, "createdAt");
                                          var tmp$6;
                                          if (match$14 !== undefined) {
                                            var value$8 = Caml_option.valFromOption(match$14);
                                            var match$15 = Js_json.decodeString(value$8);
                                            tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                                          } else {
                                            tmp$6 = Js_exn.raiseError("graphql_ppx: Field createdAt on type GitHubIssueComment is missing");
                                          }
                                          return {
                                                  id: tmp,
                                                  bodyText: tmp$1,
                                                  author: tmp$2,
                                                  createdAt: tmp$6
                                                };
                                        }
                                      }));
                            } else {
                              tmp$6 = undefined;
                            }
                            tmp$5 = {
                              nodes: tmp$6
                            };
                          } else {
                            tmp$5 = Js_exn.raiseError("graphql_ppx: Field comments on type GitHubPullRequest is missing");
                          }
                          var match$14 = Js_dict.get(value$1, "baseRefName");
                          var tmp$7;
                          if (match$14 !== undefined) {
                            var value$9 = Caml_option.valFromOption(match$14);
                            var match$15 = Js_json.decodeString(value$9);
                            tmp$7 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$9));
                          } else {
                            tmp$7 = Js_exn.raiseError("graphql_ppx: Field baseRefName on type GitHubPullRequest is missing");
                          }
                          var match$16 = Js_dict.get(value$1, "headRef");
                          var tmp$8;
                          if (match$16 !== undefined) {
                            var value$10 = Caml_option.valFromOption(match$16);
                            var match$17 = Js_json.decodeNull(value$10);
                            if (match$17 !== undefined) {
                              tmp$8 = undefined;
                            } else {
                              var value$11 = Js_option.getExn(Js_json.decodeObject(value$10));
                              var match$18 = Js_dict.get(value$11, "prefix");
                              var tmp$9;
                              if (match$18 !== undefined) {
                                var value$12 = Caml_option.valFromOption(match$18);
                                var match$19 = Js_json.decodeString(value$12);
                                tmp$9 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$12));
                              } else {
                                tmp$9 = Js_exn.raiseError("graphql_ppx: Field prefix on type GitHubRef is missing");
                              }
                              var match$20 = Js_dict.get(value$11, "name");
                              var tmp$10;
                              if (match$20 !== undefined) {
                                var value$13 = Caml_option.valFromOption(match$20);
                                var match$21 = Js_json.decodeString(value$13);
                                tmp$10 = match$21 !== undefined ? match$21 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$13));
                              } else {
                                tmp$10 = Js_exn.raiseError("graphql_ppx: Field name on type GitHubRef is missing");
                              }
                              var match$22 = Js_dict.get(value$11, "id");
                              var tmp$11;
                              if (match$22 !== undefined) {
                                var value$14 = Caml_option.valFromOption(match$22);
                                var match$23 = Js_json.decodeString(value$14);
                                tmp$11 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
                              } else {
                                tmp$11 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubRef is missing");
                              }
                              var match$24 = Js_dict.get(value$11, "target");
                              var tmp$12;
                              if (match$24 !== undefined) {
                                var value$15 = Caml_option.valFromOption(match$24);
                                var match$25 = Js_json.decodeObject(value$15);
                                if (match$25 !== undefined) {
                                  var match$26 = Js_dict.get(Caml_option.valFromOption(match$25), "__typename");
                                  if (match$26 !== undefined) {
                                    var match$27 = Js_json.decodeString(Caml_option.valFromOption(match$26));
                                    if (match$27 !== undefined) {
                                      var value$16 = Js_option.getExn(Js_json.decodeObject(value$15));
                                      var match$28 = Js_dict.get(value$16, "repository");
                                      var tmp$13;
                                      if (match$28 !== undefined) {
                                        var value$17 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$28)));
                                        var match$29 = Js_dict.get(value$17, "owner");
                                        var tmp$14;
                                        if (match$29 !== undefined) {
                                          var value$18 = Caml_option.valFromOption(match$29);
                                          var match$30 = Js_json.decodeObject(value$18);
                                          if (match$30 !== undefined) {
                                            var match$31 = Js_dict.get(Caml_option.valFromOption(match$30), "__typename");
                                            if (match$31 !== undefined) {
                                              var match$32 = Js_json.decodeString(Caml_option.valFromOption(match$31));
                                              if (match$32 !== undefined) {
                                                var value$19 = Js_option.getExn(Js_json.decodeObject(value$18));
                                                var match$33 = Js_dict.get(value$19, "id");
                                                var tmp$15;
                                                if (match$33 !== undefined) {
                                                  var value$20 = Caml_option.valFromOption(match$33);
                                                  var match$34 = Js_json.decodeString(value$20);
                                                  tmp$15 = match$34 !== undefined ? match$34 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$20));
                                                } else {
                                                  tmp$15 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubRepositoryOwner is missing");
                                                }
                                                var match$35 = Js_dict.get(value$19, "login");
                                                var tmp$16;
                                                if (match$35 !== undefined) {
                                                  var value$21 = Caml_option.valFromOption(match$35);
                                                  var match$36 = Js_json.decodeString(value$21);
                                                  tmp$16 = match$36 !== undefined ? match$36 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$21));
                                                } else {
                                                  tmp$16 = Js_exn.raiseError("graphql_ppx: Field login on type GitHubRepositoryOwner is missing");
                                                }
                                                tmp$14 = /* `GitHubRepositoryOwner */[
                                                  956597158,
                                                  {
                                                    id: tmp$15,
                                                    login: tmp$16
                                                  }
                                                ];
                                              } else {
                                                tmp$14 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubRepositoryOwner has a __typename field that is not a string");
                                              }
                                            } else {
                                              tmp$14 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubRepositoryOwner is missing the __typename field");
                                            }
                                          } else {
                                            tmp$14 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubRepositoryOwner to be an object, got " + JSON.stringify(value$18));
                                          }
                                        } else {
                                          tmp$14 = Js_exn.raiseError("graphql_ppx: Field owner on type GitHubRepository is missing");
                                        }
                                        tmp$13 = {
                                          owner: tmp$14
                                        };
                                      } else {
                                        tmp$13 = Js_exn.raiseError("graphql_ppx: Field repository on type GitHubGitObject is missing");
                                      }
                                      var match$37 = Js_dict.get(value$16, "oid");
                                      var tmp$17;
                                      if (match$37 !== undefined) {
                                        var value$22 = Caml_option.valFromOption(match$37);
                                        var match$38 = Js_json.decodeString(value$22);
                                        tmp$17 = match$38 !== undefined ? match$38 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$22));
                                      } else {
                                        tmp$17 = Js_exn.raiseError("graphql_ppx: Field oid on type GitHubGitObject is missing");
                                      }
                                      var match$39 = Js_dict.get(value$16, "id");
                                      var tmp$18;
                                      if (match$39 !== undefined) {
                                        var value$23 = Caml_option.valFromOption(match$39);
                                        var match$40 = Js_json.decodeString(value$23);
                                        tmp$18 = match$40 !== undefined ? match$40 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$23));
                                      } else {
                                        tmp$18 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubGitObject is missing");
                                      }
                                      tmp$12 = /* `GitHubGitObject */[
                                        -565457906,
                                        {
                                          repository: tmp$13,
                                          oid: tmp$17,
                                          id: tmp$18
                                        }
                                      ];
                                    } else {
                                      tmp$12 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubGitObject has a __typename field that is not a string");
                                    }
                                  } else {
                                    tmp$12 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubGitObject is missing the __typename field");
                                  }
                                } else {
                                  tmp$12 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubGitObject to be an object, got " + JSON.stringify(value$15));
                                }
                              } else {
                                tmp$12 = Js_exn.raiseError("graphql_ppx: Field target on type GitHubRef is missing");
                              }
                              tmp$8 = {
                                prefix: tmp$9,
                                name: tmp$10,
                                id: tmp$11,
                                target: tmp$12
                              };
                            }
                          } else {
                            tmp$8 = undefined;
                          }
                          return {
                                  number: tmp,
                                  id: tmp$1,
                                  title: tmp$2,
                                  body: tmp$3,
                                  isCrossRepository: tmp$4,
                                  comments: tmp$5,
                                  baseRefName: tmp$7,
                                  headRef: tmp$8
                                };
                        }
                      }));
            } else {
              tmp$3 = undefined;
            }
            tmp$2 = {
              nodes: tmp$3
            };
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field pullRequests on type GitHubRepository is missing");
          }
          tmp$1 = {
            pullRequests: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        repository: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$8(filterTag, repoName, repoOwner, limit, param) {
  var tmp;
  if (filterTag !== undefined) {
    var v = filterTag;
    tmp = v.map((function (prim) {
            return prim;
          }));
  } else {
    tmp = null;
  }
  return {
          query: ppx_printed_query$8,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "filterTag",
                    tmp
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "limit",
                    limit
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$8
        };
}

function makeWithVariables$8(variables) {
  var filterTag = variables.filterTag;
  var repoName = variables.repoName;
  var repoOwner = variables.repoOwner;
  var limit = variables.limit;
  var tmp;
  if (filterTag !== undefined) {
    var v = filterTag;
    tmp = v.map((function (prim) {
            return prim;
          }));
  } else {
    tmp = null;
  }
  return {
          query: ppx_printed_query$8,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "filterTag",
                    tmp
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "limit",
                    limit
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$8
        };
}

function makeVariables$8(filterTag, repoName, repoOwner, limit, param) {
  var tmp;
  if (filterTag !== undefined) {
    var v = filterTag;
    tmp = v.map((function (prim) {
            return prim;
          }));
  } else {
    tmp = null;
  }
  return Js_dict.fromArray([
                /* tuple */[
                  "filterTag",
                  tmp
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ],
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "limit",
                  limit
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$8(graphql_ppx_use_json_variables_fn, filterTag, repoName, repoOwner, limit, param) {
  var tmp;
  if (filterTag !== undefined) {
    var v = filterTag;
    tmp = v.map((function (prim) {
            return prim;
          }));
  } else {
    tmp = null;
  }
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "filterTag",
                      tmp
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ],
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "limit",
                      limit
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$8 = /* tuple */[
  parse$8,
  ppx_printed_query$8,
  definition_002$8
];

function ret_type$8(f) {
  return { };
}

var MT_Ret$8 = { };

var GetPRListQuery = {
  ppx_printed_query: ppx_printed_query$8,
  query: ppx_printed_query$8,
  parse: parse$8,
  make: make$8,
  makeWithVariables: makeWithVariables$8,
  makeVariables: makeVariables$8,
  definition: definition$8,
  ret_type: ret_type$8,
  MT_Ret: MT_Ret$8
};

var ppx_printed_query$9 = "query GetPRSingleFileQuery($repoName: String!, $repoOwner: String!, $branchAndFilePath: String = \"master:package.json\")  {\ngitHub  {\nrepository(name: $repoName, owner: $repoOwner)  {\nobject_: object(expression: $branchAndFilePath)  {\n__typename\n...on GitHubBlob   {\ntext  \n}\n\n}\n\n}\n\n}\n\n}\n";

function parse$9(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "repository");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "object_");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$6);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeObject(value$6);
              var tmp$3;
              if (match$6 !== undefined) {
                var match$7 = Js_dict.get(Caml_option.valFromOption(match$6), "__typename");
                if (match$7 !== undefined) {
                  var match$8 = Js_json.decodeString(Caml_option.valFromOption(match$7));
                  if (match$8 !== undefined) {
                    if (match$8 === "GitHubBlob") {
                      var value$7 = Js_option.getExn(Js_json.decodeObject(value$6));
                      var match$9 = Js_dict.get(value$7, "text");
                      var tmp$4;
                      if (match$9 !== undefined) {
                        var value$8 = Caml_option.valFromOption(match$9);
                        var match$10 = Js_json.decodeNull(value$8);
                        if (match$10 !== undefined) {
                          tmp$4 = undefined;
                        } else {
                          var match$11 = Js_json.decodeString(value$8);
                          tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                        }
                      } else {
                        tmp$4 = undefined;
                      }
                      tmp$3 = /* `GitHubBlob */[
                        -678893856,
                        {
                          text: tmp$4
                        }
                      ];
                    } else {
                      tmp$3 = /* `GitHubGitObject */[
                        -565457906,
                        (Js_option.getExn(Js_json.decodeObject(value$6)), { })
                      ];
                    }
                  } else {
                    tmp$3 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubGitObject has a __typename field that is not a string");
                  }
                } else {
                  tmp$3 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubGitObject is missing the __typename field");
                }
              } else {
                tmp$3 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubGitObject to be an object, got " + JSON.stringify(value$6));
              }
              tmp$2 = tmp$3;
            }
          } else {
            tmp$2 = undefined;
          }
          tmp$1 = {
            object_: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        repository: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$9(repoName, repoOwner, branchAndFilePath, param) {
  return {
          query: ppx_printed_query$9,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "branchAndFilePath",
                    branchAndFilePath !== undefined ? branchAndFilePath : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$9
        };
}

function makeWithVariables$9(variables) {
  var repoName = variables.repoName;
  var repoOwner = variables.repoOwner;
  var branchAndFilePath = variables.branchAndFilePath;
  return {
          query: ppx_printed_query$9,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "branchAndFilePath",
                    branchAndFilePath !== undefined ? branchAndFilePath : null
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$9
        };
}

function makeVariables$9(repoName, repoOwner, branchAndFilePath, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoName",
                  repoName
                ],
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "branchAndFilePath",
                  branchAndFilePath !== undefined ? branchAndFilePath : null
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$9(graphql_ppx_use_json_variables_fn, repoName, repoOwner, branchAndFilePath, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoName",
                      repoName
                    ],
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "branchAndFilePath",
                      branchAndFilePath !== undefined ? branchAndFilePath : null
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$9 = /* tuple */[
  parse$9,
  ppx_printed_query$9,
  definition_002$9
];

function ret_type$9(f) {
  return { };
}

var MT_Ret$9 = { };

var GetPRSingleFileQuery = {
  ppx_printed_query: ppx_printed_query$9,
  query: ppx_printed_query$9,
  parse: parse$9,
  make: make$9,
  makeWithVariables: makeWithVariables$9,
  makeVariables: makeVariables$9,
  definition: definition$9,
  ret_type: ret_type$9,
  MT_Ret: MT_Ret$9
};

var ppx_printed_query$10 = "mutation MergePullRequest($repoOwner: String!, $repoName: String!, $number: Int!, $sha: String!, $title: String!)  {\ngitHub  {\nmergePullRequest_oneGraph(input: {repoOwner: $repoOwner, repoName: $repoName, number: $number, sha: $sha, commitTitle: $title})  {\npullRequest  {\nid  \ntitle  \nmerged  \nstate  \n}\n\n}\n\n}\n\n}\n";

function parse$10(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "mergePullRequest_oneGraph");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$2)));
        var match$3 = Js_dict.get(value$4, "pullRequest");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$3)));
          var match$4 = Js_dict.get(value$5, "id");
          var tmp$3;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeString(value$6);
            tmp$3 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
          } else {
            tmp$3 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubPullRequest is missing");
          }
          var match$6 = Js_dict.get(value$5, "title");
          var tmp$4;
          if (match$6 !== undefined) {
            var value$7 = Caml_option.valFromOption(match$6);
            var match$7 = Js_json.decodeString(value$7);
            tmp$4 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
          } else {
            tmp$4 = Js_exn.raiseError("graphql_ppx: Field title on type GitHubPullRequest is missing");
          }
          var match$8 = Js_dict.get(value$5, "merged");
          var tmp$5;
          if (match$8 !== undefined) {
            var value$8 = Caml_option.valFromOption(match$8);
            var match$9 = Js_json.decodeBoolean(value$8);
            tmp$5 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$8));
          } else {
            tmp$5 = Js_exn.raiseError("graphql_ppx: Field merged on type GitHubPullRequest is missing");
          }
          var match$10 = Js_dict.get(value$5, "state");
          var tmp$6;
          if (match$10 !== undefined) {
            var value$9 = Caml_option.valFromOption(match$10);
            var match$11 = Js_json.decodeString(value$9);
            if (match$11 !== undefined) {
              var value$10 = match$11;
              switch (value$10) {
                case "CLOSED" :
                    tmp$6 = /* CLOSED */-1059826260;
                    break;
                case "MERGED" :
                    tmp$6 = /* MERGED */982149804;
                    break;
                case "OPEN" :
                    tmp$6 = /* OPEN */880069578;
                    break;
                default:
                  tmp$6 = Js_exn.raiseError("graphql_ppx: Unknown enum variant for GitHubPullRequestState: " + value$10);
              }
            } else {
              tmp$6 = Js_exn.raiseError("graphql_ppx: Expected enum value for GitHubPullRequestState, got " + JSON.stringify(value$9));
            }
          } else {
            tmp$6 = Js_exn.raiseError("graphql_ppx: Field state on type GitHubPullRequest is missing");
          }
          tmp$2 = {
            id: tmp$3,
            title: tmp$4,
            merged: tmp$5,
            state: tmp$6
          };
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field pullRequest on type GitHubMergePullRequest_oneGraphResponsePayload is missing");
        }
        tmp$1 = {
          pullRequest: tmp$2
        };
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field mergePullRequest_oneGraph on type GitHubMutation is missing");
      }
      tmp = {
        mergePullRequest_oneGraph: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$10(repoOwner, repoName, number, sha, title, param) {
  return {
          query: ppx_printed_query$10,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "number",
                    number
                  ],
                  /* tuple */[
                    "sha",
                    sha
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$10
        };
}

function makeWithVariables$10(variables) {
  var repoOwner = variables.repoOwner;
  var repoName = variables.repoName;
  var number = variables.number;
  var sha = variables.sha;
  var title = variables.title;
  return {
          query: ppx_printed_query$10,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "repoOwner",
                    repoOwner
                  ],
                  /* tuple */[
                    "repoName",
                    repoName
                  ],
                  /* tuple */[
                    "number",
                    number
                  ],
                  /* tuple */[
                    "sha",
                    sha
                  ],
                  /* tuple */[
                    "title",
                    title
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$10
        };
}

function makeVariables$10(repoOwner, repoName, number, sha, title, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "repoOwner",
                  repoOwner
                ],
                /* tuple */[
                  "repoName",
                  repoName
                ],
                /* tuple */[
                  "number",
                  number
                ],
                /* tuple */[
                  "sha",
                  sha
                ],
                /* tuple */[
                  "title",
                  title
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$10(graphql_ppx_use_json_variables_fn, repoOwner, repoName, number, sha, title, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "repoOwner",
                      repoOwner
                    ],
                    /* tuple */[
                      "repoName",
                      repoName
                    ],
                    /* tuple */[
                      "number",
                      number
                    ],
                    /* tuple */[
                      "sha",
                      sha
                    ],
                    /* tuple */[
                      "title",
                      title
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$10 = /* tuple */[
  parse$10,
  ppx_printed_query$10,
  definition_002$10
];

function ret_type$10(f) {
  return { };
}

var MT_Ret$10 = { };

var MergePRMutation = {
  ppx_printed_query: ppx_printed_query$10,
  query: ppx_printed_query$10,
  parse: parse$10,
  make: make$10,
  makeWithVariables: makeWithVariables$10,
  makeVariables: makeVariables$10,
  definition: definition$10,
  ret_type: ret_type$10,
  MT_Ret: MT_Ret$10
};

var ppx_printed_query$11 = "query SearchForPullRequests($query: String!, $last: Int!)  {\ngitHub  {\nsearch(query: $query, type: ISSUE, last: $last)  {\nnodes  {\n__typename\n...on GitHubPullRequest   {\nid  \ntitle  \nbody  \nstate  \nnumber  \ncomments(last: 100)  {\nnodes  {\nid  \nauthor  {\n__typename\nlogin  \navatarUrl  \n}\n\ncreatedAt  \nbody  \n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n";

function parse$11(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "search");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$2)));
        var match$3 = Js_dict.get(value$4, "nodes");
        var tmp$2;
        if (match$3 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeNull(value$5);
          tmp$2 = match$4 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$5)).map((function (value) {
                    var match = Js_json.decodeNull(value);
                    if (match !== undefined) {
                      return ;
                    } else {
                      var match$1 = Js_json.decodeObject(value);
                      var tmp;
                      if (match$1 !== undefined) {
                        var match$2 = Js_dict.get(Caml_option.valFromOption(match$1), "__typename");
                        if (match$2 !== undefined) {
                          var match$3 = Js_json.decodeString(Caml_option.valFromOption(match$2));
                          if (match$3 !== undefined) {
                            if (match$3 === "GitHubPullRequest") {
                              var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                              var match$4 = Js_dict.get(value$1, "id");
                              var tmp$1;
                              if (match$4 !== undefined) {
                                var value$2 = Caml_option.valFromOption(match$4);
                                var match$5 = Js_json.decodeString(value$2);
                                tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                              } else {
                                tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type GitHubPullRequest is missing");
                              }
                              var match$6 = Js_dict.get(value$1, "title");
                              var tmp$2;
                              if (match$6 !== undefined) {
                                var value$3 = Caml_option.valFromOption(match$6);
                                var match$7 = Js_json.decodeString(value$3);
                                tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                              } else {
                                tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type GitHubPullRequest is missing");
                              }
                              var match$8 = Js_dict.get(value$1, "body");
                              var tmp$3;
                              if (match$8 !== undefined) {
                                var value$4 = Caml_option.valFromOption(match$8);
                                var match$9 = Js_json.decodeString(value$4);
                                tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                              } else {
                                tmp$3 = Js_exn.raiseError("graphql_ppx: Field body on type GitHubPullRequest is missing");
                              }
                              var match$10 = Js_dict.get(value$1, "state");
                              var tmp$4;
                              if (match$10 !== undefined) {
                                var value$5 = Caml_option.valFromOption(match$10);
                                var match$11 = Js_json.decodeString(value$5);
                                if (match$11 !== undefined) {
                                  var value$6 = match$11;
                                  switch (value$6) {
                                    case "CLOSED" :
                                        tmp$4 = /* CLOSED */-1059826260;
                                        break;
                                    case "MERGED" :
                                        tmp$4 = /* MERGED */982149804;
                                        break;
                                    case "OPEN" :
                                        tmp$4 = /* OPEN */880069578;
                                        break;
                                    default:
                                      tmp$4 = Js_exn.raiseError("graphql_ppx: Unknown enum variant for GitHubPullRequestState: " + value$6);
                                  }
                                } else {
                                  tmp$4 = Js_exn.raiseError("graphql_ppx: Expected enum value for GitHubPullRequestState, got " + JSON.stringify(value$5));
                                }
                              } else {
                                tmp$4 = Js_exn.raiseError("graphql_ppx: Field state on type GitHubPullRequest is missing");
                              }
                              var match$12 = Js_dict.get(value$1, "number");
                              var tmp$5;
                              if (match$12 !== undefined) {
                                var value$7 = Caml_option.valFromOption(match$12);
                                var match$13 = Js_json.decodeNumber(value$7);
                                tmp$5 = match$13 !== undefined ? match$13 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$7));
                              } else {
                                tmp$5 = Js_exn.raiseError("graphql_ppx: Field number on type GitHubPullRequest is missing");
                              }
                              var match$14 = Js_dict.get(value$1, "comments");
                              var tmp$6;
                              if (match$14 !== undefined) {
                                var value$8 = Js_option.getExn(Js_json.decodeObject(Caml_option.valFromOption(match$14)));
                                var match$15 = Js_dict.get(value$8, "nodes");
                                var tmp$7;
                                if (match$15 !== undefined) {
                                  var value$9 = Caml_option.valFromOption(match$15);
                                  var match$16 = Js_json.decodeNull(value$9);
                                  tmp$7 = match$16 !== undefined ? undefined : Js_option.getExn(Js_json.decodeArray(value$9)).map((function (value) {
                                            var match = Js_json.decodeNull(value);
                                            if (match !== undefined) {
                                              return ;
                                            } else {
                                              var value$1 = Js_option.getExn(Js_json.decodeObject(value));
                                              var match$1 = Js_dict.get(value$1, "id");
                                              var tmp;
                                              if (match$1 !== undefined) {
                                                var value$2 = Caml_option.valFromOption(match$1);
                                                var match$2 = Js_json.decodeString(value$2);
                                                tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                                              } else {
                                                tmp = Js_exn.raiseError("graphql_ppx: Field id on type GitHubIssueComment is missing");
                                              }
                                              var match$3 = Js_dict.get(value$1, "author");
                                              var tmp$1;
                                              if (match$3 !== undefined) {
                                                var value$3 = Caml_option.valFromOption(match$3);
                                                var match$4 = Js_json.decodeNull(value$3);
                                                if (match$4 !== undefined) {
                                                  tmp$1 = undefined;
                                                } else {
                                                  var match$5 = Js_json.decodeObject(value$3);
                                                  var tmp$2;
                                                  if (match$5 !== undefined) {
                                                    var match$6 = Js_dict.get(Caml_option.valFromOption(match$5), "__typename");
                                                    if (match$6 !== undefined) {
                                                      var match$7 = Js_json.decodeString(Caml_option.valFromOption(match$6));
                                                      if (match$7 !== undefined) {
                                                        var value$4 = Js_option.getExn(Js_json.decodeObject(value$3));
                                                        var match$8 = Js_dict.get(value$4, "avatarUrl");
                                                        var tmp$3;
                                                        if (match$8 !== undefined) {
                                                          var value$5 = Caml_option.valFromOption(match$8);
                                                          var match$9 = Js_json.decodeString(value$5);
                                                          tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$5));
                                                        } else {
                                                          tmp$3 = Js_exn.raiseError("graphql_ppx: Field avatarUrl on type GitHubActor is missing");
                                                        }
                                                        var match$10 = Js_dict.get(value$4, "login");
                                                        var tmp$4;
                                                        if (match$10 !== undefined) {
                                                          var value$6 = Caml_option.valFromOption(match$10);
                                                          var match$11 = Js_json.decodeString(value$6);
                                                          tmp$4 = match$11 !== undefined ? match$11 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                                        } else {
                                                          tmp$4 = Js_exn.raiseError("graphql_ppx: Field login on type GitHubActor is missing");
                                                        }
                                                        tmp$2 = /* `GitHubActor */[
                                                          652964882,
                                                          {
                                                            avatarUrl: tmp$3,
                                                            login: tmp$4
                                                          }
                                                        ];
                                                      } else {
                                                        tmp$2 = Js_exn.raiseError("graphql_ppx: Interface implementation GitHubActor has a __typename field that is not a string");
                                                      }
                                                    } else {
                                                      tmp$2 = Js_exn.raiseError("graphql_ppx: Interface implementationGitHubActor is missing the __typename field");
                                                    }
                                                  } else {
                                                    tmp$2 = Js_exn.raiseError("graphql_ppx: Expected Interface implementation GitHubActor to be an object, got " + JSON.stringify(value$3));
                                                  }
                                                  tmp$1 = tmp$2;
                                                }
                                              } else {
                                                tmp$1 = undefined;
                                              }
                                              var match$12 = Js_dict.get(value$1, "createdAt");
                                              var tmp$5;
                                              if (match$12 !== undefined) {
                                                var value$7 = Caml_option.valFromOption(match$12);
                                                var match$13 = Js_json.decodeString(value$7);
                                                tmp$5 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                                              } else {
                                                tmp$5 = Js_exn.raiseError("graphql_ppx: Field createdAt on type GitHubIssueComment is missing");
                                              }
                                              var match$14 = Js_dict.get(value$1, "body");
                                              var tmp$6;
                                              if (match$14 !== undefined) {
                                                var value$8 = Caml_option.valFromOption(match$14);
                                                var match$15 = Js_json.decodeString(value$8);
                                                tmp$6 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                                              } else {
                                                tmp$6 = Js_exn.raiseError("graphql_ppx: Field body on type GitHubIssueComment is missing");
                                              }
                                              return {
                                                      id: tmp,
                                                      author: tmp$1,
                                                      createdAt: tmp$5,
                                                      body: tmp$6
                                                    };
                                            }
                                          }));
                                } else {
                                  tmp$7 = undefined;
                                }
                                tmp$6 = {
                                  nodes: tmp$7
                                };
                              } else {
                                tmp$6 = Js_exn.raiseError("graphql_ppx: Field comments on type GitHubPullRequest is missing");
                              }
                              tmp = /* `GitHubPullRequest */[
                                736496359,
                                {
                                  id: tmp$1,
                                  title: tmp$2,
                                  body: tmp$3,
                                  state: tmp$4,
                                  number: tmp$5,
                                  comments: tmp$6
                                }
                              ];
                            } else {
                              tmp = /* Nonexhaustive */716602267;
                            }
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Union GitHubSearchResultItem has a __typename field that is not a string");
                          }
                        } else {
                          tmp = Js_exn.raiseError("graphql_ppx: Union GitHubSearchResultItem is missing the __typename field");
                        }
                      } else {
                        tmp = Js_exn.raiseError("graphql_ppx: Expected union GitHubSearchResultItem to be an object, got " + JSON.stringify(value));
                      }
                      return tmp;
                    }
                  }));
        } else {
          tmp$2 = undefined;
        }
        tmp$1 = {
          nodes: tmp$2
        };
      } else {
        tmp$1 = Js_exn.raiseError("graphql_ppx: Field search on type GitHubQuery is missing");
      }
      tmp = {
        search: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$11(query, last, param) {
  return {
          query: ppx_printed_query$11,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "query",
                    query
                  ],
                  /* tuple */[
                    "last",
                    last
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$11
        };
}

function makeWithVariables$11(variables) {
  var query = variables.query;
  var last = variables.last;
  return {
          query: ppx_printed_query$11,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "query",
                    query
                  ],
                  /* tuple */[
                    "last",
                    last
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$11
        };
}

function makeVariables$11(query, last, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "query",
                  query
                ],
                /* tuple */[
                  "last",
                  last
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$11(graphql_ppx_use_json_variables_fn, query, last, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "query",
                      query
                    ],
                    /* tuple */[
                      "last",
                      last
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$11 = /* tuple */[
  parse$11,
  ppx_printed_query$11,
  definition_002$11
];

function ret_type$11(f) {
  return { };
}

var MT_Ret$11 = { };

var SearchForPullRequestsQuery = {
  ppx_printed_query: ppx_printed_query$11,
  query: ppx_printed_query$11,
  parse: parse$11,
  make: make$11,
  makeWithVariables: makeWithVariables$11,
  makeVariables: makeVariables$11,
  definition: definition$11,
  ret_type: ret_type$11,
  MT_Ret: MT_Ret$11
};

var ppx_printed_query$12 = "mutation AddPullRequestCommentMutation($body: String!, $pullRequestId: ID!)  {\ngitHub  {\naddComment(input: {body: $body, subjectId: $pullRequestId})  {\nclientMutationId  \n}\n\n}\n\n}\n";

function parse$12(value) {
  var value$1 = Js_option.getExn(Js_json.decodeObject(value));
  var match = Js_dict.get(value$1, "gitHub");
  var tmp;
  if (match !== undefined) {
    var value$2 = Caml_option.valFromOption(match);
    var match$1 = Js_json.decodeNull(value$2);
    if (match$1 !== undefined) {
      tmp = undefined;
    } else {
      var value$3 = Js_option.getExn(Js_json.decodeObject(value$2));
      var match$2 = Js_dict.get(value$3, "addComment");
      var tmp$1;
      if (match$2 !== undefined) {
        var value$4 = Caml_option.valFromOption(match$2);
        var match$3 = Js_json.decodeNull(value$4);
        if (match$3 !== undefined) {
          tmp$1 = undefined;
        } else {
          var value$5 = Js_option.getExn(Js_json.decodeObject(value$4));
          var match$4 = Js_dict.get(value$5, "clientMutationId");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$6 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNull(value$6);
            if (match$5 !== undefined) {
              tmp$2 = undefined;
            } else {
              var match$6 = Js_json.decodeString(value$6);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
            }
          } else {
            tmp$2 = undefined;
          }
          tmp$1 = {
            clientMutationId: tmp$2
          };
        }
      } else {
        tmp$1 = undefined;
      }
      tmp = {
        addComment: tmp$1
      };
    }
  } else {
    tmp = undefined;
  }
  return {
          gitHub: tmp
        };
}

function make$12(body, pullRequestId, param) {
  return {
          query: ppx_printed_query$12,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "body",
                    body
                  ],
                  /* tuple */[
                    "pullRequestId",
                    pullRequestId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$12
        };
}

function makeWithVariables$12(variables) {
  var body = variables.body;
  var pullRequestId = variables.pullRequestId;
  return {
          query: ppx_printed_query$12,
          variables: Js_dict.fromArray([
                  /* tuple */[
                    "body",
                    body
                  ],
                  /* tuple */[
                    "pullRequestId",
                    pullRequestId
                  ]
                ].filter((function (param) {
                      return !Js_json.test(param[1], /* Null */5);
                    }))),
          parse: parse$12
        };
}

function makeVariables$12(body, pullRequestId, param) {
  return Js_dict.fromArray([
                /* tuple */[
                  "body",
                  body
                ],
                /* tuple */[
                  "pullRequestId",
                  pullRequestId
                ]
              ].filter((function (param) {
                    return !Js_json.test(param[1], /* Null */5);
                  })));
}

function definition_002$12(graphql_ppx_use_json_variables_fn, body, pullRequestId, param) {
  return Curry._1(graphql_ppx_use_json_variables_fn, Js_dict.fromArray([
                    /* tuple */[
                      "body",
                      body
                    ],
                    /* tuple */[
                      "pullRequestId",
                      pullRequestId
                    ]
                  ].filter((function (param) {
                        return !Js_json.test(param[1], /* Null */5);
                      }))));
}

var definition$12 = /* tuple */[
  parse$12,
  ppx_printed_query$12,
  definition_002$12
];

function ret_type$12(f) {
  return { };
}

var MT_Ret$12 = { };

var AddPullRequestCommentMutation = {
  ppx_printed_query: ppx_printed_query$12,
  query: ppx_printed_query$12,
  parse: parse$12,
  make: make$12,
  makeWithVariables: makeWithVariables$12,
  makeVariables: makeVariables$12,
  definition: definition$12,
  ret_type: ret_type$12,
  MT_Ret: MT_Ret$12
};

function unwrapGHConn(conn) {
  return Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(conn, (function (d) {
                        return d.nodes;
                      })), (function (d) {
                    var __x = $$Array.to_list(d);
                    return Belt_List.reverse(Belt_List.reduce(__x, /* [] */0, (function (acc, next) {
                                      if (next !== undefined) {
                                        return /* :: */[
                                                Caml_option.valFromOption(next),
                                                acc
                                              ];
                                      } else {
                                        return acc;
                                      }
                                    })));
                  })), /* [] */0);
}

function filterGHConn(conn, filterer) {
  return Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(conn, (function (d) {
                        return d.nodes;
                      })), (function (d) {
                    var __x = $$Array.to_list(d);
                    return Belt_List.reverse(Belt_List.reduce(__x, /* [] */0, Curry.__2(filterer)));
                  })), /* [] */0);
}

function mutation(client, request, errorMessage) {
  var match = $$Promise.pending(/* () */0);
  var resolve = match[1];
  $$Promise.Js.get($$Promise.Js.fromBsPromise(Wonka.toPromise(Curry._4(ReasonUrql.Client.executeMutation, client, request, undefined, /* () */0))), (function (param) {
          var tmp = param.response;
          if (typeof tmp === "number" || tmp.tag) {
            return Curry._1(resolve, /* Error */Block.__(1, [errorMessage]));
          } else {
            return Curry._1(resolve, /* Ok */Block.__(0, [/* () */0]));
          }
        }));
  return match[0];
}

function query(client, request, $staropt$star, param) {
  var cachePolicy = $staropt$star !== undefined ? $staropt$star : /* CacheAndNetwork */1038276441;
  var match = $$Promise.pending(/* () */0);
  var resolve = match[1];
  var opts = {
    requestPolicy: cachePolicy
  };
  Wonka.subscribe((function (data) {
            return Curry._1(resolve, /* Ok */Block.__(0, [data]));
          }))(Curry._4(ReasonUrql.Client.executeQuery, client, request, Caml_option.some(opts), /* () */0));
  return match[0];
}

function chain(mutations) {
  var helper = function (mutations) {
    if (mutations) {
      var rest = mutations[1];
      return $$Promise.flatMap(Curry._1(mutations[0], /* () */0), (function (a) {
                    if (a.tag) {
                      return $$Promise.resolved(/* Error */Block.__(1, [a[0]]));
                    } else {
                      return helper(rest);
                    }
                  }));
    } else {
      return $$Promise.resolved(/* Ok */Block.__(0, [/* () */0]));
    }
  };
  return helper(mutations);
}

var exampleQuery = "\"repo:onegraph/oneserve [パルme] in:title:\"";

export {
  urqlClient ,
  FindSourceRepositoryIdQuery ,
  GetFileShaAndContentQuery ,
  ForkGitHubRepoMutation ,
  DoIHaveARepoQuery ,
  CreateBranchMutation ,
  UpdateFileContentMutation ,
  CreatePullRequestMutation ,
  AddLabelsToPullRequestMutation ,
  GetPRListQuery ,
  GetPRSingleFileQuery ,
  MergePRMutation ,
  exampleQuery ,
  SearchForPullRequestsQuery ,
  AddPullRequestCommentMutation ,
  unwrapGHConn ,
  filterGHConn ,
  mutation ,
  query ,
  chain ,
  
}
/* urqlClient Not a pure module */
