// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Urql from "urql";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Wonka from "wonka/src/wonka.js";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.js";
import * as Js_math from "bs-platform/lib/es6/js_math.js";
import * as Belt_List from "bs-platform/lib/es6/belt_List.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_MapInt from "bs-platform/lib/es6/belt_MapInt.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as OneGraphAuth from "bs-onegraph-auth/src/OneGraphAuth.bs.js";
import * as ReactMarkdown from "react-markdown";
import * as YamlFrontMatter from "yaml-front-matter";
import * as Hooks$EggheadStatic from "./Hooks.bs.js";
import * as Icons$EggheadStatic from "./Icons.bs.js";
import * as ReactAnimatedTree from "react-animated-tree";
import * as Config$EggheadStatic from "../lib/Config.bs.js";
import * as OneJwt$EggheadStatic from "../lib/bindings/OneJwt.bs.js";
import * as GraphQL$EggheadStatic from "./GraphQL.bs.js";
import * as ReactMonacoLazy$EggheadStatic from "./ReactMonacoLazy.bs.js";
import * as PullRequestManager$EggheadStatic from "./PullRequestManager.bs.js";

var assign = (function(name, item) {
     window[name] = item;
     });

function random(length) {
  var gen = function (param) {
    var n = Js_math.random_int(0, 62);
    if (n < 26) {
      return /* "a" */97 + n | 0;
    } else if (n < 52) {
      return (/* "A" */65 + n | 0) - 26 | 0;
    } else {
      return ((/* "0" */48 + n | 0) - 26 | 0) - 26 | 0;
    }
  };
  var gen$1 = function (param) {
    return $$String.make(1, Pervasives.char_of_int(gen(/* () */0)));
  };
  return $$String.concat("", $$Array.to_list($$Array.init(length, gen$1)));
}

function toBranchName(string, username) {
  var sanitized = string.replace((/[^a-zA-Z0-9]+/g), "-");
  return ("branch-name-" + (sanitized + ("" + (String(username) + "")))).toLocaleLowerCase();
}

var $$String$1 = {
  random: random,
  toBranchName: toBranchName
};

function extractSourcePosition(string) {
  if (string == null) {
    return ;
  } else {
    var match = string.split("-");
    if (match.length !== 2) {
      return ;
    } else {
      var from = match[0];
      var to_ = match[1];
      var match$1 = from.split(":");
      var match$2 = to_.split(":");
      if (match$1.length !== 2) {
        return ;
      } else {
        var fromLine = match$1[0];
        var fromChar = match$1[1];
        if (match$2.length !== 2) {
          return ;
        } else {
          var toLine = match$2[0];
          var toChar = match$2[1];
          return /* tuple */[
                  {
                    line: Caml_format.caml_int_of_string(fromLine),
                    char: Caml_format.caml_int_of_string(fromChar)
                  },
                  {
                    line: Caml_format.caml_int_of_string(toLine),
                    char: Caml_format.caml_int_of_string(toChar)
                  }
                ];
        }
      }
    }
  }
}

var Utils = {
  $$String: $$String$1,
  extractSourcePosition: extractSourcePosition
};

var YamlFrontMatter$1 = { };

function getLocalJwtMe(auth) {
  return Belt_Option.map(Caml_option.nullable_to_opt(auth.accessToken()), (function (token) {
                return OneJwt$EggheadStatic.payload(token.accessToken);
              }));
}

function getLocalUserId(auth) {
  var jwtMe = getLocalJwtMe(auth);
  return Belt_Option.map(Belt_Option.flatMap(jwtMe, (function (jwtMe) {
                    return Belt_Option.flatMap(jwtMe.user, (function (user) {
                                  return user.id;
                                }));
                  })), (function (prim) {
                return String(prim);
              }));
}

var OneGraphAuth$1 = {
  findMissingAuthServices: OneGraphAuth.findMissingAuthServices,
  logout: OneGraphAuth.logout,
  authHeaders: OneGraphAuth.authHeaders,
  clearToken: OneGraphAuth.clearToken,
  getLocalJwtMe: getLocalJwtMe,
  getLocalUserId: getLocalUserId
};

var ReactAnimatedTree$1 = { };

var Box = { };

var ReactResizable = {
  Box: Box
};

function wrapper(onClick, param, children) {
  return React.createElement("div", {
              onClick: onClick
            }, children);
}

var WrapRoot = {
  wrapper: wrapper
};

var ReactMarkdown$1 = {
  WrapRoot: WrapRoot
};

var ReactDraggable = { };

var ReactModal = { };

var ReactDiffViewer = { };

var repoOwner = "OneGraph";

var repoName = "egghead-asciicasts-experiment";

function courseSlug(course) {
  return course.title.replace((/\W+/g), "-").toLocaleLowerCase();
}

var Egghead = {
  courseSlug: courseSlug
};

function CourseEditor$ReadOnly(Props) {
  var lesson = Props.lesson;
  var transcript = Props.transcript;
  return React.createElement("div", undefined, React.createElement("h4", undefined, lesson.title), React.createElement(ReactMarkdown, {
                  source: transcript.text
                }));
}

var ReadOnly = {
  make: CourseEditor$ReadOnly
};

var modalStyle = {
  display: "flex",
  marginTop: "50%",
  position: "relative",
  flexDirection: "column"
};

var activeEditorStyle = {
  backgroundColor: "white",
  border: "1px solid #ccc",
  bottom: "0px",
  left: "0px",
  minHeight: "250px",
  overflowX: "scroll",
  position: "fixed",
  width: "100%",
  borderRadius: "4px",
  boxShadow: "6px 4px 24px 0px rgba(0, 0, 0, 0.34)"
};

var inactiveEditorStyle = {
  backgroundColor: "white",
  border: "1px solid #ccc",
  bottom: "0px",
  left: "0px",
  minHeight: "250px",
  overflowX: "scroll",
  position: "fixed",
  opacity: "0.98",
  borderRadius: "4px"
};

var textEditorStyle = {
  fontSize: "2em",
  height: "20ch",
  width: "100%"
};

function submitPr(client, branchName, title, body, editedContent, filePath, sha, username, frontMatter) {
  return GraphQL$EggheadStatic.chain(/* :: */[
              (function (param) {
                  return GraphQL$EggheadStatic.mutation(client, GraphQL$EggheadStatic.CreateBranchMutation.make(repoOwner, repoName, branchName, /* () */0), "Error creating branch for PR");
                }),
              /* :: */[
                (function (param) {
                    return GraphQL$EggheadStatic.mutation(client, GraphQL$EggheadStatic.UpdateFileContentMutation.make(repoOwner, repoName, branchName, filePath, "Updated " + filePath, editedContent, sha, /* () */0), "Error updating file content");
                  }),
                /* :: */[
                  (function (param) {
                      var frontMatterContent = JSON.stringify(frontMatter, null, 2);
                      var frontMatterText = "---\n" + (String(frontMatterContent) + "\n---");
                      return GraphQL$EggheadStatic.mutation(client, GraphQL$EggheadStatic.CreatePullRequestMutation.make(repoOwner, repoName, branchName, title + ("[by " + (username + "]")), "" + (String(frontMatterText) + ("\n\n" + (String(body) + ""))), "master", /* () */0), "Error creating PullRequest");
                    }),
                  /* [] */0
                ]
              ]
            ]);
}

function CourseEditor$ChatHistory(Props) {
  var client = Props.client;
  var comments = Props.comments;
  var myUsername = Props.myUsername;
  var pr = Props.pr;
  Props.onSubmit;
  Props.onRefresh;
  var commentsEl = Belt_List.toArray(Belt_List.map(comments, (function (comment) {
              var author = Belt_Option.map(comment.author, (function (param) {
                      return param[1];
                    }));
              var authorLogin = Belt_Option.mapWithDefault(author, "Unknown", (function (author) {
                      return author.login;
                    }));
              var avatarUrl = Belt_Option.mapWithDefault(author, "", (function (author) {
                      return author.avatarUrl;
                    }));
              var messageIsMe = authorLogin === myUsername;
              var authorEl = React.createElement("span", {
                    className: "message-data-name"
                  }, authorLogin);
              var timeEl = React.createElement("span", {
                    className: "message-data-time"
                  }, Curry._1(PullRequestManager$EggheadStatic.timeSince, new Date(comment.createdAt)) + " ago");
              var avatarEl = React.createElement("img", {
                    className: "chat-avatar " + (
                      messageIsMe ? "float-left" : "float-right"
                    ),
                    alt: "avatar",
                    src: avatarUrl
                  });
              console.log("Comment id: ", comment.id);
              return React.createElement("li", {
                          key: comment.id,
                          className: "clearfix"
                        }, React.createElement("div", {
                              className: "message-data clearfix" + (
                                messageIsMe ? "" : " align-right"
                              )
                            }, messageIsMe ? React.createElement(React.Fragment, undefined, avatarEl, authorEl, timeEl) : React.createElement(React.Fragment, undefined, timeEl, authorEl, avatarEl)), React.createElement("div", {
                              className: "message " + (
                                messageIsMe ? " my-message" : " other-message align-right"
                              )
                            }, comment.body));
            })));
  var prTitle = PullRequestManager$EggheadStatic.prTitle(pr);
  var commentCount = List.length(comments);
  var match = commentCount === 1;
  String(commentCount) + (" " + (
      match ? "comment" : "comments"
    ));
  var pullRequestId = pr.id;
  return React.createElement("div", {
              className: "chat"
            }, React.createElement("div", {
                  className: "chat-meta"
                }, prTitle), React.createElement("div", {
                  className: "chat-history"
                }, React.createElement("ul", {
                      className: "chat-messages"
                    }, commentsEl)), React.createElement(PullRequestManager$EggheadStatic.MessageCompose.make, {
                  onSubmit: (function (message) {
                      return PullRequestManager$EggheadStatic.submitPrComment(client, message, pullRequestId);
                    })
                }));
}

var ChatHistory = {
  make: CourseEditor$ChatHistory
};

function CourseEditor$PullRequestPreparation(Props) {
  var client = Props.client;
  var editedText = Props.editedText;
  Props.content;
  var sha = Props.sha;
  var filePath = Props.filePath;
  var username = Props.username;
  var lessonId = Props.lessonId;
  var editorHandle = React.useRef(undefined);
  console.log("basic editor handle: ", editorHandle);
  Hooks$EggheadStatic.useWindowSize((function (size) {
          console.log("basic editor handle: ", editorHandle);
          console.log("Resize detected", editorHandle, size);
          var match = editorHandle.current;
          if (match !== undefined) {
            var editor = Caml_option.valFromOption(match);
            console.log("Resizing editor: ", (function (prim) {
                    prim.layout();
                    return /* () */0;
                  }), editor);
            editor.layout();
            return /* () */0;
          } else {
            return /* () */0;
          }
        }));
  var match = React.useReducer((function (state, action) {
          if (action.tag) {
            return {
                    title: state.title,
                    body: action[0]
                  };
          } else {
            return {
                    title: action[0],
                    body: state.body
                  };
          }
        }), {
        title: "",
        body: ""
      });
  var dispatch = match[1];
  var state = match[0];
  return React.createElement("div", {
              style: {
                display: "flex",
                alignContent: "stretch",
                alignItems: "stretch",
                flex: "0 0 auto",
                flexDirection: "column",
                flexWrap: "nowrap",
                justifyContent: "flex-start"
              }
            }, React.createElement("h4", undefined, "Title of your change"), React.createElement("input", {
                  type: "text",
                  value: state.title,
                  onChange: (function ($$event) {
                      return Curry._1(dispatch, /* SetTitle */Block.__(0, [$$event.target.value]));
                    })
                }), React.createElement("h4", undefined, "Explanation of your change"), React.createElement("textarea", {
                  value: state.body,
                  onChange: (function ($$event) {
                      return Curry._1(dispatch, /* SetBody */Block.__(1, [$$event.target.value]));
                    })
                }), React.createElement("button", {
                  onClick: (function (param) {
                      var frontMatter = {
                        lessonId: lessonId,
                        filePath: filePath,
                        username: username,
                        sha: sha
                      };
                      var submitPromise = submitPr(client, toBranchName(state.title, username), state.title, state.body, editedText, filePath, sha, username, frontMatter);
                      submitPromise.then((function (result) {
                              var tmp;
                              if (result.tag) {
                                console.log("Error creating PR: ", result[0]);
                                tmp = /* () */0;
                              } else {
                                console.log("Ok, PR created!");
                                tmp = /* () */0;
                              }
                              return Promise.resolve(tmp);
                            }));
                      return /* () */0;
                    })
                }, "Submit PR"));
}

var PullRequestPreparation = {
  make: CourseEditor$PullRequestPreparation
};

function filepathOfLesson(course, lesson) {
  var lessonSlug = lesson.slug;
  var courseSlug$1 = courseSlug(course);
  return "" + (String(courseSlug$1) + ("/lessons/" + (String(lessonSlug) + ".md")));
}

function updateLesson(state, id, update) {
  var lessons = Belt_MapInt.update(state.lessons, id, (function (param) {
          if (param !== undefined) {
            return Curry._1(update, param);
          }
          
        }));
  return {
          prs: state.prs,
          chatOpen: state.chatOpen,
          lessons: lessons,
          lessonId: state.lessonId,
          prId: state.prId
        };
}

function CourseEditor$Editor(Props) {
  Props.auth;
  var client = Props.client;
  var onInitiateSubmit = Props.onInitiateSubmit;
  Props.onLogout;
  var jwtMe = Props.jwtMe;
  var course = Props.course;
  var editorHandle = React.useRef(undefined);
  var lessons = Belt_List.fromArray(course.lessons);
  var firstLessonId = lessons ? lessons[0].id : undefined;
  var lessons$1 = Belt_MapInt.fromArray(Belt_Array.map(course.lessons, (function (lesson) {
              return /* tuple */[
                      lesson.id,
                      {
                        lesson: lesson,
                        editPayload: undefined
                      }
                    ];
            })));
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            return {
                    prs: state.prs,
                    chatOpen: !state.chatOpen,
                    lessons: state.lessons,
                    lessonId: state.lessonId,
                    prId: state.prId
                  };
          } else {
            switch (action.tag | 0) {
              case /* EditLesson */0 :
                  var edited = action[1];
                  return updateLesson(state, action[0], (function (lesson) {
                                var editPayload = Belt_Option.map(lesson.editPayload, (function (editPayload) {
                                        return {
                                                transcript: editPayload.transcript,
                                                edited: edited,
                                                sha: editPayload.sha
                                              };
                                      }));
                                return {
                                        lesson: lesson.lesson,
                                        editPayload: editPayload
                                      };
                              }));
              case /* SelectLesson */1 :
                  var id = action[0];
                  console.log("Looking at ", id);
                  return {
                          prs: state.prs,
                          chatOpen: state.chatOpen,
                          lessons: state.lessons,
                          lessonId: id,
                          prId: undefined
                        };
              case /* SelectPR */2 :
                  var prId = action[1];
                  console.log("Looking at ", prId);
                  return {
                          prs: state.prs,
                          chatOpen: state.chatOpen,
                          lessons: state.lessons,
                          lessonId: action[0],
                          prId: prId
                        };
              case /* LoadTranscript */3 :
                  var editPayload = action[1];
                  return updateLesson(state, action[0], (function (lesson) {
                                return {
                                        lesson: lesson.lesson,
                                        editPayload: editPayload
                                      };
                              }));
              case /* LoadPrs */4 :
                  var prs = action[0];
                  console.log("Pre-pro prs", prs);
                  var prs$1 = Belt_List.reduce(prs, state.prs, (function (acc, next) {
                          return Belt_MapInt.update(acc, next.lessonId, (function (param) {
                                        if (param !== undefined) {
                                          return /* :: */[
                                                  next.pr,
                                                  param
                                                ];
                                        } else {
                                          return /* :: */[
                                                  next.pr,
                                                  /* [] */0
                                                ];
                                        }
                                      }));
                        }));
                  return {
                          prs: prs$1,
                          chatOpen: state.chatOpen,
                          lessons: state.lessons,
                          lessonId: state.lessonId,
                          prId: state.prId
                        };
              
            }
          }
        }), {
        prs: Belt_MapInt.empty,
        chatOpen: true,
        lessons: lessons$1,
        lessonId: firstLessonId,
        prId: undefined
      });
  var dispatch = match[1];
  var state = match[0];
  var lesson = Belt_Option.flatMap(state.lessonId, (function (lessonId) {
          return Belt_MapInt.get(state.lessons, lessonId);
        }));
  var match$1 = state.lessonId;
  var match$2 = state.prId;
  var pullRequest;
  if (match$1 !== undefined && match$2 !== undefined) {
    var prId = match$2;
    pullRequest = Belt_Option.flatMap(Belt_MapInt.get(state.prs, match$1), (function (prs) {
            return Belt_List.getBy(prs, (function (pr) {
                          return pr.id === prId;
                        }));
          }));
  } else {
    pullRequest = undefined;
  }
  console.log("Selected lesson: ", lesson);
  console.log("Selected PullRequest: ", pullRequest);
  React.useEffect((function () {
          var match = OneJwt$EggheadStatic.findGitHubLogin(jwtMe);
          if (match !== undefined) {
            var request = GraphQL$EggheadStatic.SearchForPullRequestsQuery.make("repo:OneGraph/egghead-asciicasts-experiment [by " + (String(match) + "] in:title"), 100, /* () */0);
            Wonka.subscribe((function (data) {
                      var match = data.response;
                      if (typeof match === "number" || match.tag) {
                        return /* () */0;
                      } else {
                        var pullRequests = GraphQL$EggheadStatic.filterGHConn(Belt_Option.map(match[0].gitHub, (function (d) {
                                    return d.search;
                                  })), (function (acc, next) {
                                if (next !== undefined) {
                                  var match = next;
                                  if (typeof match === "number" || match[0] !== 736496359) {
                                    return acc;
                                  } else {
                                    var pr = match[1];
                                    var body = pr.body;
                                    var parsed = YamlFrontMatter.loadFront(body);
                                    console.log("PR: ", parsed);
                                    var match$1 = parsed.lessonId;
                                    var next$1;
                                    if (match$1 !== undefined) {
                                      var pr_lessonId = Caml_option.valFromOption(match$1);
                                      var pr$1 = {
                                        lessonId: pr_lessonId,
                                        pr: pr
                                      };
                                      next$1 = /* :: */[
                                        pr$1,
                                        acc
                                      ];
                                    } else {
                                      next$1 = acc;
                                    }
                                    console.log("Next: ", next$1);
                                    return next$1;
                                  }
                                } else {
                                  return acc;
                                }
                              }));
                        return Curry._1(dispatch, /* LoadPrs */Block.__(4, [pullRequests]));
                      }
                    }))(Curry._4(ReasonUrql.Client.executeQuery, client, request, undefined, /* () */0));
          }
          return ;
        }), ([]));
  React.useEffect((function () {
          Belt_Option.map(editorHandle.current, (function (prim) {
                  prim.layout();
                  return /* () */0;
                }));
          return ;
        }), /* array */[state.chatOpen]);
  React.useEffect((function () {
          if (lesson !== undefined) {
            var match = lesson;
            if (match.editPayload === undefined) {
              var lesson$1 = match.lesson;
              console.log("Lesson Id: ", state.lessonId);
              var lessonSlug = lesson$1.slug;
              var courseSlug$1 = courseSlug(course);
              var filePath = "" + (String(courseSlug$1) + ("/lessons/" + (String(lessonSlug) + ".md")));
              var request = GraphQL$EggheadStatic.GetFileShaAndContentQuery.make(repoName, repoOwner, "" + (String("master") + (":" + (String(filePath) + ""))), /* () */0);
              Wonka.subscribe((function (data) {
                        var match = data.response;
                        if (typeof match === "number" || match.tag) {
                          return /* () */0;
                        } else {
                          var blob = Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(match[0].gitHub, (function (d) {
                                          return d.repository;
                                        })), (function (d) {
                                      return d.object_;
                                    })), (function (param) {
                                  if (param[0] >= -565457906) {
                                    return ;
                                  } else {
                                    return Caml_option.some(param[1]);
                                  }
                                }));
                          var sha = Belt_Option.map(blob, (function (d) {
                                  return d.oid;
                                }));
                          var transcript = Belt_Option.flatMap(blob, (function (d) {
                                  return d.text;
                                }));
                          if (sha !== undefined && transcript !== undefined) {
                            var transcript$1 = transcript;
                            var editPayload = {
                              transcript: transcript$1,
                              edited: transcript$1,
                              sha: sha
                            };
                            return Curry._1(dispatch, /* LoadTranscript */Block.__(3, [
                                          lesson$1.id,
                                          editPayload
                                        ]));
                          } else {
                            return /* () */0;
                          }
                        }
                      }))(Curry._4(ReasonUrql.Client.executeQuery, client, request, undefined, /* () */0));
            }
            
          }
          return ;
        }), /* array */[state.lessonId]);
  var rootWrapper = function (value) {
    return React.createElement("div", {
                onClick: (function ($$event) {
                    var match = $$event.altKey;
                    var match$1 = editorHandle.current;
                    if (match && match$1 !== undefined) {
                      var editorHandle$1 = Caml_option.valFromOption(match$1);
                      var target = $$event.target;
                      Belt_Option.map(extractSourcePosition(target.getAttribute("data-sourcepos")), (function (param) {
                              var to_ = param[1];
                              var from = param[0];
                              editorHandle$1.revealLine(from.line);
                              editorHandle$1.setSelection({
                                    startLineNumber: from.line,
                                    startColumn: from.char,
                                    endLineNumber: to_.line,
                                    endColumn: to_.char
                                  });
                              editorHandle$1.focus();
                              return /* () */0;
                            }));
                      return /* () */0;
                    } else {
                      return /* () */0;
                    }
                  })
              }, value.children);
  };
  var tmp;
  if (lesson !== undefined) {
    var match$3 = lesson.editPayload;
    tmp = match$3 !== undefined ? React.createElement(ReactMarkdown, {
            source: match$3.edited,
            onClick: (function ($$event) {
                console.log("Please tell me this works", $$event);
                return /* () */0;
              }),
            sourcePos: true,
            renderers: {
              root: rootWrapper
            }
          }) : "No lesson transcript";
  } else {
    tmp = "No lesson selected";
  }
  var match$4 = OneJwt$EggheadStatic.avatarUrl(jwtMe);
  var tmp$1;
  if (lesson !== undefined) {
    var match$5 = lesson;
    var match$6 = match$5.editPayload;
    if (match$6 !== undefined) {
      var lesson$1 = match$5.lesson;
      tmp$1 = React.createElement(ReactMonacoLazy$EggheadStatic.Editor.Lazy.make, {
            height: "250px",
            value: match$6.edited,
            language: "markdown",
            theme: "vs-dark",
            options: {
              minimap: {
                enabled: false
              }
            },
            onChange: (function (newValue, _event) {
                return Curry._1(dispatch, /* EditLesson */Block.__(0, [
                              lesson$1.id,
                              newValue
                            ]));
              }),
            editorDidMount: (function (editor, _monaco) {
                editorHandle.current = Caml_option.some(editor);
                return /* () */0;
              }),
            className: "transcript-editor"
          });
    } else {
      tmp$1 = null;
    }
  } else {
    tmp$1 = null;
  }
  var match$7 = state.chatOpen;
  var match$8 = OneJwt$EggheadStatic.findGitHubLogin(jwtMe);
  var match$9 = Belt_Option.flatMap(lesson, (function (lesson) {
          return lesson.editPayload;
        }));
  var tmp$2;
  if (pullRequest !== undefined) {
    if (match$8 !== undefined) {
      var pr = Caml_option.valFromOption(pullRequest);
      tmp$2 = React.createElement("div", undefined, React.createElement(CourseEditor$ChatHistory, {
                client: client,
                comments: GraphQL$EggheadStatic.unwrapGHConn(Caml_option.some(pr.comments)),
                myUsername: match$8,
                pr: pr,
                onSubmit: (function (param) {
                    return /* () */0;
                  }),
                onRefresh: (function (param) {
                    return /* () */0;
                  })
              }));
    } else {
      tmp$2 = null;
    }
  } else if (match$8 !== undefined && lesson !== undefined && match$9 !== undefined) {
    var editPayload = match$9;
    var lessonEdit = lesson;
    tmp$2 = React.createElement(CourseEditor$PullRequestPreparation, {
          client: client,
          editedText: editPayload.edited,
          content: editPayload.edited,
          sha: editPayload.sha,
          filePath: filepathOfLesson(course, lessonEdit.lesson),
          username: match$8,
          lessonId: lessonEdit.lesson.id
        });
  } else {
    tmp$2 = null;
  }
  var tmp$3;
  if (lesson !== undefined) {
    var match$10 = lesson.editPayload;
    if (match$10 !== undefined) {
      var match$11 = match$10;
      var edited = match$11.edited;
      var match$12 = match$11.transcript === edited;
      tmp$3 = match$12 ? null : React.createElement("button", {
              style: {
                position: "absolute",
                right: "10px"
              },
              onClick: (function (param) {
                  return Curry._1(onInitiateSubmit, edited);
                })
            }, "Create PR");
    } else {
      tmp$3 = null;
    }
  } else {
    tmp$3 = null;
  }
  return React.createElement("div", undefined, React.createElement("div", {
                  style: {
                    marginBottom: "250px"
                  }
                }, tmp), React.createElement("div", {
                  id: "eggy-editor-container"
                }, React.createElement("div", {
                      className: "editor-title"
                    }, React.createElement("div", {
                          className: "lesson-title"
                        }, course.title + (" by " + (course.instructor.full_name + " - ")), match$4 !== undefined ? React.createElement("img", {
                                style: {
                                  display: "inline",
                                  width: "28px",
                                  borderRadius: "50px"
                                },
                                src: match$4
                              }) : null, Belt_Option.getWithDefault(OneJwt$EggheadStatic.findGitHubLogin(jwtMe), "unknown")), React.createElement("div", {
                          className: "spacer"
                        }), React.createElement("div", {
                          className: "chat-control"
                        })), React.createElement("div", {
                      className: "editor-body"
                    }, React.createElement("div", {
                          className: "tree"
                        }, React.createElement(ReactAnimatedTree.default, {
                              content: course.title,
                              open: true,
                              children: Belt_Array.map(course.lessons, (function (lesson) {
                                      var prs = Belt_MapInt.getWithDefault(state.prs, lesson.id, /* [] */0);
                                      return React.createElement(ReactAnimatedTree.default, {
                                                  content: React.createElement("span", {
                                                        style: {
                                                          cursor: "pointer"
                                                        },
                                                        onClick: (function (param) {
                                                            return Curry._1(dispatch, /* SelectLesson */Block.__(1, [lesson.id]));
                                                          })
                                                      }, lesson.title),
                                                  children: prs ? Belt_List.toArray(Belt_List.map(prs, (function (pr) {
                                                                var match = pr.state;
                                                                return React.createElement(ReactAnimatedTree.default, {
                                                                            content: React.createElement("span", {
                                                                                  style: {
                                                                                    cursor: "pointer"
                                                                                  },
                                                                                  onClick: (function (param) {
                                                                                      return Curry._1(dispatch, /* SelectPR */Block.__(2, [
                                                                                                    lesson.id,
                                                                                                    pr.id
                                                                                                  ]));
                                                                                    })
                                                                                }, pr.title),
                                                                            type: React.createElement("span", undefined, match !== 880069578 ? (
                                                                                    match >= 982149804 ? "✅" : "❌"
                                                                                  ) : "📖"),
                                                                            key: pr.id
                                                                          });
                                                              }))) : null,
                                                  key: String(lesson.id)
                                                });
                                    }))
                            })), React.createElement("div", {
                          className: "editor"
                        }, tmp$1), React.createElement("div", {
                          className: match$7 ? "chat-open" : "chat-closed"
                        }, tmp$2)), React.createElement("div", {
                      className: "editor-footer"
                    }, "Egghead editor powered by OneGraph", tmp$3)));
}

var Editor = {
  updateLesson: updateLesson,
  make: CourseEditor$Editor
};

function CourseEditor$Conversation(Props) {
  var client = Props.client;
  var username = Props.username;
  var onHide = Props.onHide;
  var request = GraphQL$EggheadStatic.SearchForPullRequestsQuery.make("repo:OneGraph/egghead-asciicasts-experiment [by " + (String(username) + "] in:title"), 100, /* () */0);
  var match = Curry._5(ReasonUrql.Hooks.useQuery, request, /* NetworkOnly */971373850, undefined, undefined, /* () */0);
  var executeQuery = match[1];
  var response = match[0].response;
  console.log("Response: ", response);
  var tmp;
  if (typeof response === "number") {
    tmp = response === /* Fetching */0 ? React.createElement("div", undefined, "Loading conversation...") : React.createElement("div", undefined, "Not found");
  } else if (response.tag) {
    tmp = React.createElement("div", undefined, "Error loading conversation");
  } else {
    var pullRequests = GraphQL$EggheadStatic.filterGHConn(Belt_Option.map(response[0].gitHub, (function (d) {
                return d.search;
              })), (function (acc, next) {
            if (next !== undefined) {
              var match = next;
              if (typeof match === "number" || match[0] !== 736496359) {
                return acc;
              } else {
                return /* :: */[
                        match[1],
                        acc
                      ];
              }
            } else {
              return acc;
            }
          }));
    tmp = React.createElement(PullRequestManager$EggheadStatic.make, {
          client: client,
          pullRequests: pullRequests,
          myUsername: "sgrove",
          refresh: (function (param) {
              console.log(executeQuery);
              return Curry._1(executeQuery, undefined);
            }),
          onHide: onHide
        });
  }
  return React.createElement("div", undefined, tmp);
}

var Conversation = {
  make: CourseEditor$Conversation
};

function CourseEditor$ConversationBubble(Props) {
  var client = Props.client;
  var username = Props.username;
  var match = React.useReducer((function (state, action) {
          if (action) {
            return {
                    username: state.username,
                    isOpen: true
                  };
          } else {
            return {
                    username: state.username,
                    isOpen: false
                  };
          }
        }), {
        username: username,
        isOpen: false
      });
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state.isOpen;
  var tmp;
  if (match$1) {
    tmp = React.createElement(CourseEditor$Conversation, {
          client: client,
          username: username,
          onHide: (function (param) {
              return Curry._1(dispatch, /* Hide */0);
            })
        });
  } else {
    var match$2 = state.isOpen;
    tmp = React.createElement("div", {
          style: {
            bottom: "10px",
            display: match$2 ? "none" : "block",
            position: "fixed",
            right: "10px"
          }
        }, React.createElement("button", {
              style: {
                backgroundColor: "black",
                border: "none",
                color: "white",
                cursor: "pointer",
                height: "60px",
                width: "60px",
                borderRadius: "50px"
              },
              onClick: (function (param) {
                  return Curry._1(dispatch, /* Show */1);
                })
            }, React.createElement(Icons$EggheadStatic.Chat.make, { })));
  }
  return React.createElement("div", {
              style: {
                height: "100vh",
                position: "fixed",
                right: "0px",
                top: "0px"
              }
            }, tmp);
}

var ConversationBubble = {
  make: CourseEditor$ConversationBubble
};

function amILoggedInto(auth, service, ifYes, ifNo, param) {
  console.log("Am I logged into ", service);
  var __x = auth.isLoggedIn(service);
  return __x.then((function (isLoggedIn) {
                return Promise.resolve((console.log("Logged in? ", service, isLoggedIn), isLoggedIn ? Belt_Option.map(ifYes, (function (f) {
                                      return Curry._1(f, /* () */0);
                                    })) : Belt_Option.map(ifNo, (function (f) {
                                      return Curry._1(f, /* () */0);
                                    }))));
              }));
}

function CourseEditor$LoginGuard(Props) {
  var auth = Props.auth;
  var client = Props.client;
  var course = Props.course;
  var match = React.useReducer((function (state, action) {
          var authState = action[1];
          var me = typeof authState === "number" ? state.me : authState[0];
          if (action[0]) {
            return {
                    gitHub: authState,
                    egghead: state.egghead,
                    me: me
                  };
          } else {
            return {
                    gitHub: state.gitHub,
                    egghead: authState,
                    me: me
                  };
          }
        }), {
        gitHub: /* LoggedOut */1,
        egghead: /* LoggedOut */1,
        me: undefined
      });
  var dispatch = match[1];
  var state = match[0];
  var checkLogin = function (serviceName, service) {
    return amILoggedInto(auth, serviceName, (function (param) {
                  Belt_Option.map(getLocalJwtMe(auth), (function (me) {
                          return Curry._1(dispatch, /* SetAuthState */[
                                      service,
                                      /* LoggedIn */[me]
                                    ]);
                        }));
                  return /* () */0;
                }), undefined, /* () */0);
  };
  React.useEffect((function () {
          checkLogin("eggheadio", /* Egghead */0);
          checkLogin("github", /* GitHub */1);
          return ;
        }), ([]));
  var match$1 = state.egghead;
  var match$2 = state.gitHub;
  var loggedIn = typeof match$1 === "number" || typeof match$2 === "number" ? false : true;
  var onLogout = function (param) {
    return Belt_List.forEach(/* :: */[
                /* Egghead */0,
                /* :: */[
                  /* GitHub */1,
                  /* [] */0
                ]
              ], (function (service) {
                  var serviceName = service ? "github" : "eggheadio";
                  var __x = OneGraphAuth.logout(auth, serviceName, undefined, /* () */0);
                  __x.then((function (_next) {
                          return Promise.resolve(Curry._1(dispatch, /* SetAuthState */[
                                          service,
                                          /* LoggedOut */1
                                        ]));
                        }));
                  return /* () */0;
                }));
  };
  var loginIcon = function (service) {
    var match = service ? /* tuple */[
        "github",
        "GitHub",
        state.gitHub
      ] : /* tuple */[
        "eggheadio",
        "Egghead",
        state.egghead
      ];
    var state$1 = match[2];
    var friendlyName = match[1];
    if (typeof state$1 === "number") {
      if (state$1 !== 0) {
        var serviceName = match[0];
        return React.createElement("img", {
                    style: {
                      cursor: "pointer",
                      width: "50px"
                    },
                    alt: "Login with " + (String(friendlyName) + ""),
                    src: "/images/logos/" + (String(serviceName) + ".svg"),
                    onClick: (function (param) {
                        Curry._1(dispatch, /* SetAuthState */[
                              service,
                              /* Loading */0
                            ]);
                        var __x = auth.login(serviceName);
                        __x.then((function (param) {
                                var __x = auth.isLoggedIn(serviceName);
                                return __x.then((function (isLoggedIn) {
                                              return Promise.resolve(isLoggedIn ? (Belt_Option.map(getLocalJwtMe(auth), (function (me) {
                                                                    return Curry._1(dispatch, /* SetAuthState */[
                                                                                service,
                                                                                /* LoggedIn */[me]
                                                                              ]);
                                                                  })), /* () */0) : Curry._1(dispatch, /* SetAuthState */[
                                                                service,
                                                                /* LoggedOut */1
                                                              ]));
                                            }));
                              }));
                        return /* () */0;
                      })
                  });
      } else {
        return React.createElement("div", undefined, "Logging into " + (String(friendlyName) + "..."));
      }
    } else {
      return React.createElement("div", undefined, "Logged into " + (String(friendlyName) + ""));
    }
  };
  var match$3 = state.me;
  if (loggedIn && match$3 !== undefined) {
    return React.createElement(React.Suspense, {
                children: React.createElement(CourseEditor$Editor, {
                      auth: auth,
                      client: client,
                      onInitiateSubmit: (function (editedContent) {
                          console.log(editedContent);
                          return /* () */0;
                        }),
                      onLogout: onLogout,
                      jwtMe: match$3,
                      course: course
                    }),
                fallback: React.createElement("div", undefined, "Loading editor...")
              });
  }
  return React.createElement("div", {
              style: {
                border: "1px solid gray",
                width: "500px",
                borderRadius: "4px"
              }
            }, "Please log in", React.createElement("br", undefined), loginIcon(/* GitHub */1), loginIcon(/* Egghead */0));
}

var LoginGuard = {
  make: CourseEditor$LoginGuard
};

function CourseEditor(Props) {
  var course = Props.course;
  console.log("Course: ", course);
  var match = Belt_List.fromArray(course.lessons);
  if (match) {
    if (Config$EggheadStatic.auth !== undefined && GraphQL$EggheadStatic.urqlClient !== undefined) {
      var client = Caml_option.valFromOption(GraphQL$EggheadStatic.urqlClient);
      return React.createElement(Urql.Provider, {
                  value: client,
                  children: React.createElement(CourseEditor$LoginGuard, {
                        auth: Caml_option.valFromOption(Config$EggheadStatic.auth),
                        client: client,
                        course: course
                      })
                });
    } else {
      return "Loading the Egghead\xe2\x84\xa2 lesson editor...";
    }
  } else {
    return "No lessons";
  }
}

var Tree = /* alias */0;

var make = CourseEditor;

var $$default = CourseEditor;

export {
  assign ,
  Utils ,
  YamlFrontMatter$1 as YamlFrontMatter,
  OneGraphAuth$1 as OneGraphAuth,
  ReactAnimatedTree$1 as ReactAnimatedTree,
  Tree ,
  ReactResizable ,
  ReactMarkdown$1 as ReactMarkdown,
  ReactDraggable ,
  ReactModal ,
  ReactDiffViewer ,
  repoOwner ,
  repoName ,
  Egghead ,
  ReadOnly ,
  modalStyle ,
  activeEditorStyle ,
  inactiveEditorStyle ,
  textEditorStyle ,
  submitPr ,
  ChatHistory ,
  PullRequestPreparation ,
  filepathOfLesson ,
  Editor ,
  Conversation ,
  ConversationBubble ,
  amILoggedInto ,
  LoginGuard ,
  make ,
  $$default ,
  $$default as default,
  
}
/* assign Not a pure module */
